+ source /root/mugen-riscv/libs/locallibs/common_lib.sh
++ python3 --version
++ '[' 0 -eq 0 ']'
++ source /root/mugen-riscv/libs/locallibs/common_lib_python.sh
+ main
++ type -t post_test
+ '[' -n function ']'
+ trap post_test EXIT INT HUP TERM
+ rpm -qa
+ grep expect
++ type -t config_params
+ '[' -n function ']'
+ config_params
++ pwd
+ addr=/root/mugen-riscv/testcases/cli-test/netdata
+ name=/test.txt
++ type -t pre_test
+ '[' -n function ']'
+ pre_test
+ LOG_INFO 'Start environmental preparation.'
+ message='Start environmental preparation.'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'Start environmental preparation.'
Thu Feb  2 22:32:06 2023 - INFO  - Start environmental preparation.
+ DNF_INSTALL netdata
+ pkgs=netdata
+ node=1
+ '[' -z '' ']'
+ tmpfile=
++ python3 /root/mugen-riscv/libs/locallibs/rpm_manage.py install --pkgs netdata --node 1 --tempfile ''
+ tmpfile2=/tmp/tmp9jaeojct
+ '[' -z '' ']'
+ tmpfile=/tmp/tmp9jaeojct
+ touch test.txt
+ LOG_INFO 'End of environmental preparation!'
+ message='End of environmental preparation!'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'End of environmental preparation!'
Thu Feb  2 22:33:30 2023 - INFO  - End of environmental preparation!
++ type -t run_test
+ '[' -n function ']'
+ run_test
+ LOG_INFO 'Start to run testcase:oe_test_netdata.'
+ message='Start to run testcase:oe_test_netdata.'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'Start to run testcase:oe_test_netdata.'
Thu Feb  2 22:33:30 2023 - INFO  - Start to run testcase:oe_test_netdata.
+ systemctl start netdata
+ CHECK_RESULT 0 0 0 'Failed : start'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed : start'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ systemctl restart netdata
+ CHECK_RESULT 0 0 0 'Failed : restart'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed : restart'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ grep running
+ systemctl status netdata
     Active: active (running) since Thu 2023-02-02 22:34:32 CST; 241ms ago
+ CHECK_RESULT 0 0 0 'Failed : status'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed : status'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ systemctl stop netdata
+ CHECK_RESULT 0 0 0 'Failed : stop'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed : stop'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -v
+ grep '[[:digit:]]*'
netdata v1.16.0
+ CHECK_RESULT 0 0 0 'Failed option: -v'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -v'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -c /etc/netdata/netdata.conf
+ CHECK_RESULT 0 0 0 'Failed option: -c filename'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -c filename'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -d
+ CHECK_RESULT 0 0 0 'Failed option: -d'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -d'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -h
+ grep SYNOPSIS
 SYNOPSIS: netdata [options]
+ CHECK_RESULT 0 0 0 'Failed option: -h'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -h'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -P /root/mugen-riscv/testcases/cli-test/netdata/test.txt
+ CHECK_RESULT 0 0 0 'Failed option: -P'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -P'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
++ cat test.txt
+ exc=4218
++ ps -ef
++ grep 'netdata -D'
++ awk '{print $2}'
++ grep -v grep
+ res=
+ CHECK_RESULT 0 exc res 'Failed option: -P'
+ actual_result=0
+ expect_result=exc
+ mode=res
+ error_log='Failed option: -P'
+ '[' -z 0 ']'
+ '[' res -eq 0 ']'
/root/mugen-riscv/libs/locallibs/common_lib.sh: line 37: [: res: integer expression expected
+ test 0x == excx
+ return 0
+ netdata -i 127.0.0.1
+ CHECK_RESULT 0 0 0 'Failed option: -i IP'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -i IP'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -p 19999
+ CHECK_RESULT 0 0 0 'Failed option: -p'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -p'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -t 1
+ CHECK_RESULT 0 0 0 'Failed option: -t'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -t'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -u netdata
+ CHECK_RESULT 0 0 0 'Failed option: -u'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -u'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -s /
2023-02-02 22:35:33: netdata INFO  : MAIN : Using host prefix directory '/'
+ CHECK_RESULT 0 0 0 'Failed option: -s'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -s'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -V
+ grep '[[:digit:]]*'
netdata v1.16.0
+ CHECK_RESULT 0 0 0 'Failed option: -V'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -V'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -W stacksize=10
+ CHECK_RESULT 0 0 0 'Failed option: -W stacksize=N'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -W stacksize=N'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -W debug_flags=10
+ CHECK_RESULT 0 0 0 'Failed option: -W debug_flags=N'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -W debug_flags=N'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -W unittest
buffer_sprintf() works as expected.
str2ld() parsed value '1.2345678' exactly the same way with strtold(), returned 1.234568 vs 1.234568
str2ld() parsed value '-35.6' exactly the same way with strtold(), returned -35.600000 vs -35.600000
str2ld() parsed value '0.00123' exactly the same way with strtold(), returned 0.001230 vs 0.001230
str2ld() parsed value '23842384234234.2' exactly the same way with strtold(), returned 23842384234234.200000 vs 23842384234234.200000
str2ld() parsed value '.1' exactly the same way with strtold(), returned 0.100000 vs 0.100000
str2ld() parsed value '1.2e-10' exactly the same way with strtold(), returned 0.000000 vs 0.000000
str2ld() parsed value 'hello' exactly the same way with strtold(), returned 0.000000 vs 0.000000
str2ld() parsed value '1wrong' exactly the same way with strtold(), returned 1.000000 vs 1.000000
str2ld() parsed value 'nan' exactly the same way with strtold(), returned nan vs nan
str2ld() parsed value 'inf' exactly the same way with strtold(), returned inf vs inf
2023-02-02 22:35:33: netdata INFO  : MAIN : CONFIG: cannot load user config '/etc/netdata/stream.conf'. Will try stock config.
2023-02-02 22:35:34: netdata INFO  : MAIN : CONFIG: cannot load stock config '/usr/lib64/netdata/conf.d/stream.conf'. Running with internal defaults.
2023-02-02 22:35:34: netdata INFO  : MAIN : Host 'unittest' (at registry as 'openEuler-riscv64') with guid '91425a84-a306-11ed-aecf-525400123456' initialized, os 'linux', timezone 'unknown', tags '', program_name 'netdata', program_version 'v1.16.0', update every 1, memory mode ram, history entries 3996, streaming disabled (to '' with api key ''), health disabled, cache_dir '/var/cache/netdata', varlib_dir '/var/lib/netdata', health_log '/var/lib/netdata/health/health-log.db', alarms default handler '/usr/libexec/netdata/plugins.d/alarm-notify.sh', alarms default recipient 'root'
strdupz_path_subpath("", "") = ".": OK
strdupz_path_subpath("/", "") = "/": OK
strdupz_path_subpath("/etc/netdata", "") = "/etc/netdata": OK
strdupz_path_subpath("/etc/netdata///", "") = "/etc/netdata": OK
strdupz_path_subpath("/etc/netdata///", "health.d") = "/etc/netdata/health.d": OK
strdupz_path_subpath("/etc/netdata///", "///health.d") = "/etc/netdata/health.d": OK
strdupz_path_subpath("/etc/netdata", "///health.d") = "/etc/netdata/health.d": OK
strdupz_path_subpath("", "///health.d") = "./health.d": OK
strdupz_path_subpath("/", "///health.d") = "/health.d": OK
'0.000000000000' (system) printed as '0' (netdata): OK
'0.000000100000' (system) printed as '0.0000001' (netdata): OK
'0.000000090000' (system) printed as '0.0000001' (netdata): OK
'0.000000001000' (system) printed as '0' (netdata): OK
'100.000000000000' (system) printed as '100' (netdata): OK
'-100.000000000000' (system) printed as '-100' (netdata): OK
'123.456789012346' (system) printed as '123.456789' (netdata): OK
'9999.999999899999' (system) printed as '9999.9999999' (netdata): OK
'-9999.999999899999' (system) printed as '-9999.9999999' (netdata): OK
RRDCALC_STATUSes are sortable.
Creating chart
2023-02-02 22:35:34: netdata ERROR : MAIN : Cannot advise the kernel about the memory usage (MADV_MERGEABLE) of file '(null)'. (errno 22, Invalid argument)
Created chart with id 'chart.ID', name 'chart.ID'
Creating dimension DIM1
Created dimension with id 'DIM1', name 'DIM1'
Creating dimension DIM2
Created dimension with id 'DIM2', name 'DIM2'
Renaming chart to CHARTNAME1
Renamed chart with id 'chart.ID' to name 'chart.CHARTNAME1'
Renaming chart to CHARTNAME2
Renamed chart with id 'chart.ID' to name 'chart.CHARTNAME2'
Renaming dimension DIM1 to DIM1NAME1
Renamed dimension with id 'DIM1' to name 'DIM1NAME1'
Renaming dimension DIM1 to DIM1NAME2
Renamed dimension with id 'DIM1' to name 'DIM1NAME2'
Renaming dimension DIM2 to DIM2NAME1
Renamed dimension with id 'DIM2' to name 'DIM2NAME1'
Renaming dimension DIM2 to DIM2NAME2
Renamed dimension with id 'DIM2' to name 'DIM2NAME2'
{
	"chart": "chart.ID",
	"chart_name": "chart.CHARTNAME2",
	"chart_context": "context",
	"chart_variables": {
	},
	"family": "family",
	"family_variables": {
	},
	"host": "unittest",
	"host_variables": {
	}
}

Running test 'test1':
test absolute values stored at exactly second boundaries
    > test1: feeding position 1
       >> dim1 with value 10
    > test1: fixing first collection time to be 0 microseconds to second boundary
    > test1: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 20
    > test1: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 30
    > test1: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 40
    > test1: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 50
    > test1: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 60
    > test1: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 70
    > test1: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 80
    > test1: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 90
    > test1: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 100
    test1/dim1: checking position 1 (at 0 secs), expecting value 20.0000000, found 20.0000000, OK
    test1/dim1: checking position 2 (at 1 secs), expecting value 30.0000000, found 30.0000000, OK
    test1/dim1: checking position 3 (at 2 secs), expecting value 40.0000000, found 40.0000000, OK
    test1/dim1: checking position 4 (at 3 secs), expecting value 50.0000000, found 50.0000000, OK
    test1/dim1: checking position 5 (at 4 secs), expecting value 60.0000000, found 60.0000000, OK
    test1/dim1: checking position 6 (at 5 secs), expecting value 70.0000000, found 70.0000000, OK
    test1/dim1: checking position 7 (at 6 secs), expecting value 80.0000000, found 80.0000000, OK
    test1/dim1: checking position 8 (at 7 secs), expecting value 90.0000000, found 90.0000000, OK
    test1/dim1: checking position 9 (at 8 secs), expecting value 100.0000000, found 100.0000000, OK

Running test 'test2':
test absolute values stored in the middle of second boundaries
    > test2: feeding position 1
       >> dim1 with value 10
    > test2: fixing first collection time to be 500000 microseconds to second boundary
    > test2: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 20
    > test2: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 30
    > test2: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 40
    > test2: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 50
    > test2: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 60
    > test2: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 70
    > test2: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 80
    > test2: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 90
    > test2: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 100
    test2/dim1: checking position 1 (at 0 secs), expecting value 20.0000000, found 20.0000000, OK
    test2/dim1: checking position 2 (at 1 secs), expecting value 30.0000000, found 30.0000000, OK
    test2/dim1: checking position 3 (at 2 secs), expecting value 40.0000000, found 40.0000000, OK
    test2/dim1: checking position 4 (at 3 secs), expecting value 50.0000000, found 50.0000000, OK
    test2/dim1: checking position 5 (at 4 secs), expecting value 60.0000000, found 60.0000000, OK
    test2/dim1: checking position 6 (at 5 secs), expecting value 70.0000000, found 70.0000000, OK
    test2/dim1: checking position 7 (at 6 secs), expecting value 80.0000000, found 80.0000000, OK
    test2/dim1: checking position 8 (at 7 secs), expecting value 90.0000000, found 90.0000000, OK
    test2/dim1: checking position 9 (at 8 secs), expecting value 100.0000000, found 100.0000000, OK

Running test 'test3':
test incremental values stored at exactly second boundaries
    > test3: feeding position 1
       >> dim1 with value 10
    > test3: fixing first collection time to be 0 microseconds to second boundary
    > test3: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 20
    > test3: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 30
    > test3: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 40
    > test3: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 50
    > test3: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 60
    > test3: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 70
    > test3: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 80
    > test3: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 90
    > test3: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 100
    test3/dim1: checking position 1 (at 0 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 2 (at 1 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 3 (at 2 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 4 (at 3 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 5 (at 4 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 6 (at 5 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 7 (at 6 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 8 (at 7 secs), expecting value 10.0000000, found 10.0000000, OK
    test3/dim1: checking position 9 (at 8 secs), expecting value 10.0000000, found 10.0000000, OK

Running test 'test4':
test incremental values stored in the middle of second boundaries
    > test4: feeding position 1
       >> dim1 with value 10
    > test4: fixing first collection time to be 500000 microseconds to second boundary
    > test4: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 20
    > test4: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 30
    > test4: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 40
    > test4: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 50
    > test4: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 60
    > test4: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 70
    > test4: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 80
    > test4: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 90
    > test4: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 100
    test4/dim1: checking position 1 (at 0 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 2 (at 1 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 3 (at 2 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 4 (at 3 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 5 (at 4 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 6 (at 5 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 7 (at 6 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 8 (at 7 secs), expecting value 10.0000000, found 10.0000000, OK
    test4/dim1: checking position 9 (at 8 secs), expecting value 10.0000000, found 10.0000000, OK

Running test 'test5':
test 32-bit incremental values overflow
    > test5: feeding position 1
       >> dim1 with value 0
    > test5: fixing first collection time to be 0 microseconds to second boundary
    > test5: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 1431655765.0000000, rate 1431655765.0000000
       >> dim1 with value 1431655765
    > test5: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 1431655765.0000000, rate 1431655765.0000000
       >> dim1 with value 2863311530
    > test5: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta -2863311530.0000000, rate -2863311530.0000000
       >> dim1 with value 0
    > test5: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 1431655765.0000000, rate 1431655765.0000000
       >> dim1 with value 1431655765
    > test5: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 1431655765.0000000, rate 1431655765.0000000
       >> dim1 with value 2863311530
    > test5: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta -2863311530.0000000, rate -2863311530.0000000
       >> dim1 with value 0
    > test5: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 1431655765.0000000, rate 1431655765.0000000
       >> dim1 with value 1431655765
    > test5: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 1431655765.0000000, rate 1431655765.0000000
       >> dim1 with value 2863311530
    > test5: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta -2863311530.0000000, rate -2863311530.0000000
       >> dim1 with value 0
    test5/dim1: checking position 1 (at 0 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 2 (at 1 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 3 (at 2 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 4 (at 3 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 5 (at 4 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 6 (at 5 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 7 (at 6 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 8 (at 7 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK
    test5/dim1: checking position 9 (at 8 secs), expecting value 1431655800.0000000, found 1431655800.0000000, OK

Running test 'test5b':
test 16-bit incremental values overflow
    > test5b: feeding position 1
       >> dim1 with value 0
    > test5b: fixing first collection time to be 0 microseconds to second boundary
    > test5b: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 21845.0000000, rate 21845.0000000
       >> dim1 with value 21845
    > test5b: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 21845.0000000, rate 21845.0000000
       >> dim1 with value 43690
    > test5b: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta -43690.0000000, rate -43690.0000000
       >> dim1 with value 0
    > test5b: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 21845.0000000, rate 21845.0000000
       >> dim1 with value 21845
    > test5b: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 21845.0000000, rate 21845.0000000
       >> dim1 with value 43690
    > test5b: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta -43690.0000000, rate -43690.0000000
       >> dim1 with value 0
    > test5b: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 21845.0000000, rate 21845.0000000
       >> dim1 with value 21845
    > test5b: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 21845.0000000, rate 21845.0000000
       >> dim1 with value 43690
    > test5b: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta -43690.0000000, rate -43690.0000000
       >> dim1 with value 0
    test5b/dim1: checking position 1 (at 0 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 2 (at 1 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 3 (at 2 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 4 (at 3 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 5 (at 4 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 6 (at 5 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 7 (at 6 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 8 (at 7 secs), expecting value 21845.0000000, found 21845.0000000, OK
    test5b/dim1: checking position 9 (at 8 secs), expecting value 21845.0000000, found 21845.0000000, OK

Running test 'test5c':
test 8-bit incremental values overflow
    > test5c: feeding position 1
       >> dim1 with value 0
    > test5c: fixing first collection time to be 0 microseconds to second boundary
    > test5c: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 85.0000000, rate 85.0000000
       >> dim1 with value 85
    > test5c: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 85.0000000, rate 85.0000000
       >> dim1 with value 170
    > test5c: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta -170.0000000, rate -170.0000000
       >> dim1 with value 0
    > test5c: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 85.0000000, rate 85.0000000
       >> dim1 with value 85
    > test5c: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 85.0000000, rate 85.0000000
       >> dim1 with value 170
    > test5c: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta -170.0000000, rate -170.0000000
       >> dim1 with value 0
    > test5c: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 85.0000000, rate 85.0000000
       >> dim1 with value 85
    > test5c: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 85.0000000, rate 85.0000000
       >> dim1 with value 170
    > test5c: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta -170.0000000, rate -170.0000000
       >> dim1 with value 0
    test5c/dim1: checking position 1 (at 0 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 2 (at 1 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 3 (at 2 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 4 (at 3 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 5 (at 4 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 6 (at 5 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 7 (at 6 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 8 (at 7 secs), expecting value 85.0000000, found 85.0000000, OK
    test5c/dim1: checking position 9 (at 8 secs), expecting value 85.0000000, found 85.0000000, OK

Running test 'test5d':
test 64-bit incremental values overflow
    > test5d: feeding position 1
       >> dim1 with value 0
    > test5d: fixing first collection time to be 0 microseconds to second boundary
    > test5d: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 6148914691236517205.0000000, rate 6148914691236517205.0000000
       >> dim1 with value 6148914691236517205
    > test5d: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta -12297829382473034411.0000000, rate -12297829382473034411.0000000
       >> dim1 with value -6148914691236517206
    > test5d: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 6148914691236517206.0000000, rate 6148914691236517206.0000000
       >> dim1 with value 0
    > test5d: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 6148914691236517205.0000000, rate 6148914691236517205.0000000
       >> dim1 with value 6148914691236517205
    > test5d: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta -12297829382473034411.0000000, rate -12297829382473034411.0000000
       >> dim1 with value -6148914691236517206
    > test5d: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 6148914691236517206.0000000, rate 6148914691236517206.0000000
       >> dim1 with value 0
    > test5d: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 6148914691236517205.0000000, rate 6148914691236517205.0000000
       >> dim1 with value 6148914691236517205
    > test5d: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta -12297829382473034411.0000000, rate -12297829382473034411.0000000
       >> dim1 with value -6148914691236517206
    > test5d: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 6148914691236517206.0000000, rate 6148914691236517206.0000000
       >> dim1 with value 0
    test5d/dim1: checking position 1 (at 0 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 2 (at 1 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 3 (at 2 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 4 (at 3 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 5 (at 4 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 6 (at 5 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 7 (at 6 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 8 (at 7 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK
    test5d/dim1: checking position 9 (at 8 secs), expecting value 6148915000000000000.0000000, found 6148915000000000000.0000000, OK

Running test 'test6':
test incremental values updated within the same second
    > test6: feeding position 1
       >> dim1 with value 1000
    > test6: fixing first collection time to be 250000 microseconds to second boundary
    > test6: feeding position 2, after 0.250 seconds (0.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 2000
    > test6: feeding position 3, after 0.250 seconds (0.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 3000
    > test6: feeding position 4, after 0.250 seconds (0.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 4000
    > test6: feeding position 5, after 0.250 seconds (1.000 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 5000
    > test6: feeding position 6, after 0.250 seconds (1.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 6000
    > test6: feeding position 7, after 0.250 seconds (1.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 7000
    > test6: feeding position 8, after 0.250 seconds (1.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 8000
    > test6: feeding position 9, after 0.250 seconds (2.000 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 9000
    > test6: feeding position 10, after 0.250 seconds (2.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 10000
    > test6: feeding position 11, after 0.250 seconds (2.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 11000
    > test6: feeding position 12, after 0.250 seconds (2.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 12000
    > test6: feeding position 13, after 0.250 seconds (3.000 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 13000
    > test6: feeding position 14, after 0.250 seconds (3.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 14000
    > test6: feeding position 15, after 0.250 seconds (3.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 15000
    > test6: feeding position 16, after 0.250 seconds (3.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 16000
    test6/dim1: checking position 1 (at 0 secs), expecting value 4000.0000000, found 4000.0000000, OK
    test6/dim1: checking position 2 (at 1 secs), expecting value 4000.0000000, found 4000.0000000, OK
    test6/dim1: checking position 3 (at 2 secs), expecting value 4000.0000000, found 4000.0000000, OK
    test6/dim1: checking position 4 (at 3 secs), expecting value 4000.0000000, found 4000.0000000, OK

Running test 'test7':
test incremental values updated in long durations
    > test7: feeding position 1
       >> dim1 with value 1000
    > test7: fixing first collection time to be 500000 microseconds to second boundary
    > test7: feeding position 2, after 2.000 seconds (2.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 2000
    > test7: feeding position 3, after 2.000 seconds (4.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 3000
    > test7: feeding position 4, after 2.000 seconds (6.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 4000
    > test7: feeding position 5, after 2.000 seconds (8.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 5000
    > test7: feeding position 6, after 2.000 seconds (10.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 6000
    > test7: feeding position 7, after 2.000 seconds (12.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 7000
    > test7: feeding position 8, after 2.000 seconds (14.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 8000
    > test7: feeding position 9, after 2.000 seconds (16.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 9000
    > test7: feeding position 10, after 2.000 seconds (18.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 10000
    test7/dim1: checking position 1 (at 0 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 2 (at 1 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 3 (at 2 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 4 (at 3 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 5 (at 4 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 6 (at 5 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 7 (at 6 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 8 (at 7 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 9 (at 8 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 10 (at 9 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 11 (at 10 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 12 (at 11 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 13 (at 12 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 14 (at 13 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 15 (at 14 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 16 (at 15 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 17 (at 16 secs), expecting value 500.0000000, found 500.0000000, OK
    test7/dim1: checking position 18 (at 17 secs), expecting value 500.0000000, found 500.0000000, OK

Running test 'test8':
test absolute values updated in long durations
    > test8: feeding position 1
       >> dim1 with value 1000
    > test8: fixing first collection time to be 500000 microseconds to second boundary
    > test8: feeding position 2, after 2.000 seconds (2.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 2000
    > test8: feeding position 3, after 2.000 seconds (4.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 3000
    > test8: feeding position 4, after 2.000 seconds (6.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 4000
    > test8: feeding position 5, after 2.000 seconds (8.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 5000
    > test8: feeding position 6, after 2.000 seconds (10.000 seconds from start), delta 1000.0000000, rate 500.0000000
       >> dim1 with value 6000
    test8/dim1: checking position 1 (at 0 secs), expecting value 1250.0000000, found 1250.0000000, OK
    test8/dim1: checking position 2 (at 1 secs), expecting value 2000.0000000, found 2000.0000000, OK
    test8/dim1: checking position 3 (at 2 secs), expecting value 2250.0000000, found 2250.0000000, OK
    test8/dim1: checking position 4 (at 3 secs), expecting value 3000.0000000, found 3000.0000000, OK
    test8/dim1: checking position 5 (at 4 secs), expecting value 3250.0000000, found 3250.0000000, OK
    test8/dim1: checking position 6 (at 5 secs), expecting value 4000.0000000, found 4000.0000000, OK
    test8/dim1: checking position 7 (at 6 secs), expecting value 4250.0000000, found 4250.0000000, OK
    test8/dim1: checking position 8 (at 7 secs), expecting value 5000.0000000, found 5000.0000000, OK
    test8/dim1: checking position 9 (at 8 secs), expecting value 5250.0000000, found 5250.0000000, OK
    test8/dim1: checking position 10 (at 9 secs), expecting value 6000.0000000, found 6000.0000000, OK

Running test 'test9':
test absolute values updated within the same second
    > test9: feeding position 1
       >> dim1 with value 1000
    > test9: fixing first collection time to be 250000 microseconds to second boundary
    > test9: feeding position 2, after 0.250 seconds (0.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 2000
    > test9: feeding position 3, after 0.250 seconds (0.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 3000
    > test9: feeding position 4, after 0.250 seconds (0.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 4000
    > test9: feeding position 5, after 0.250 seconds (1.000 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 5000
    > test9: feeding position 6, after 0.250 seconds (1.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 6000
    > test9: feeding position 7, after 0.250 seconds (1.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 7000
    > test9: feeding position 8, after 0.250 seconds (1.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 8000
    > test9: feeding position 9, after 0.250 seconds (2.000 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 9000
    > test9: feeding position 10, after 0.250 seconds (2.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 10000
    > test9: feeding position 11, after 0.250 seconds (2.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 11000
    > test9: feeding position 12, after 0.250 seconds (2.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 12000
    > test9: feeding position 13, after 0.250 seconds (3.000 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 13000
    > test9: feeding position 14, after 0.250 seconds (3.250 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 14000
    > test9: feeding position 15, after 0.250 seconds (3.500 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 15000
    > test9: feeding position 16, after 0.250 seconds (3.750 seconds from start), delta 1000.0000000, rate 4000.0000000
       >> dim1 with value 16000
    test9/dim1: checking position 1 (at 0 secs), expecting value 4000.0000000, found 4000.0000000, OK
    test9/dim1: checking position 2 (at 1 secs), expecting value 8000.0000000, found 8000.0000000, OK
    test9/dim1: checking position 3 (at 2 secs), expecting value 12000.0000000, found 12000.0000000, OK
    test9/dim1: checking position 4 (at 3 secs), expecting value 16000.0000000, found 16000.0000000, OK

Running test 'test10':
test incremental values updated in short and long durations
    > test10: feeding position 1
       >> dim1 with value 1000
    > test10: fixing first collection time to be 500000 microseconds to second boundary
    > test10: feeding position 2, after 0.600 seconds (0.600 seconds from start), delta 600.0000000, rate 1000.0000000
       >> dim1 with value 1600
    > test10: feeding position 3, after 0.200 seconds (0.800 seconds from start), delta 200.0000000, rate 1000.0000000
       >> dim1 with value 1800
    > test10: feeding position 4, after 1.000 seconds (1.800 seconds from start), delta 1000.0000000, rate 1000.0000000
       >> dim1 with value 2800
    > test10: feeding position 5, after 0.200 seconds (2.000 seconds from start), delta 200.0000000, rate 1000.0000000
       >> dim1 with value 3000
    > test10: feeding position 6, after 2.000 seconds (4.000 seconds from start), delta 2000.0000000, rate 1000.0000000
       >> dim1 with value 5000
    > test10: feeding position 7, after 0.600 seconds (4.600 seconds from start), delta 600.0000000, rate 1000.0000000
       >> dim1 with value 5600
    > test10: feeding position 8, after 0.400 seconds (5.000 seconds from start), delta 400.0000000, rate 1000.0000000
       >> dim1 with value 6000
    > test10: feeding position 9, after 0.900 seconds (5.900 seconds from start), delta 900.0000000, rate 1000.0000000
       >> dim1 with value 6900
    > test10: feeding position 10, after 1.000 seconds (6.900 seconds from start), delta 1000.0000000, rate 1000.0000000
       >> dim1 with value 7900
    test10/dim1: checking position 1 (at 0 secs), expecting value 1000.0000000, found 1000.0000000, OK
    test10/dim1: checking position 2 (at 1 secs), expecting value 1000.0000000, found 1000.0000000, OK
    test10/dim1: checking position 3 (at 2 secs), expecting value 1000.0000000, found 1000.0000000, OK
    test10/dim1: checking position 4 (at 3 secs), expecting value 1000.0000000, found 1000.0000000, OK
    test10/dim1: checking position 5 (at 4 secs), expecting value 1000.0000000, found 1000.0000000, OK
    test10/dim1: checking position 6 (at 5 secs), expecting value 1000.0000000, found 1000.0000000, OK
    test10/dim1: checking position 7 (at 6 secs), expecting value 1000.0000000, found 1000.0000000, OK

Running test 'test11':
test percentage-of-incremental-row with equal values
    > test11: feeding position 1
       >> dim1 with value 10
       >> dim2 with value 10
    > test11: fixing first collection time to be 0 microseconds to second boundary
    > test11: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 20
       >> dim2 with value 20
    > test11: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 30
       >> dim2 with value 30
    > test11: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 40
       >> dim2 with value 40
    > test11: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 50
       >> dim2 with value 50
    > test11: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 60
       >> dim2 with value 60
    > test11: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 70
       >> dim2 with value 70
    > test11: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 80
       >> dim2 with value 80
    > test11: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 90
       >> dim2 with value 90
    > test11: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 100
       >> dim2 with value 100
    test11/dim1: checking position 1 (at 0 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 1 (at 0 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 2 (at 1 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 2 (at 1 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 3 (at 2 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 3 (at 2 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 4 (at 3 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 4 (at 3 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 5 (at 4 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 5 (at 4 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 6 (at 5 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 6 (at 5 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 7 (at 6 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 7 (at 6 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 8 (at 7 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 8 (at 7 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim1: checking position 9 (at 8 secs), expecting value 50.0000000, found 50.0000000, OK
    test11/dim2: checking position 9 (at 8 secs), expecting value 50.0000000, found 50.0000000, OK

Running test 'test12':
test percentage-of-incremental-row with equal values
    > test12: feeding position 1
       >> dim1 with value 10
       >> dim2 with value 30
    > test12: fixing first collection time to be 0 microseconds to second boundary
    > test12: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 20
       >> dim2 with value 60
    > test12: feeding position 3, after 1.000 seconds (2.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 30
       >> dim2 with value 90
    > test12: feeding position 4, after 1.000 seconds (3.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 40
       >> dim2 with value 120
    > test12: feeding position 5, after 1.000 seconds (4.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 50
       >> dim2 with value 150
    > test12: feeding position 6, after 1.000 seconds (5.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 60
       >> dim2 with value 180
    > test12: feeding position 7, after 1.000 seconds (6.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 70
       >> dim2 with value 210
    > test12: feeding position 8, after 1.000 seconds (7.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 80
       >> dim2 with value 240
    > test12: feeding position 9, after 1.000 seconds (8.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 90
       >> dim2 with value 270
    > test12: feeding position 10, after 1.000 seconds (9.000 seconds from start), delta 10.0000000, rate 10.0000000
       >> dim1 with value 100
       >> dim2 with value 300
    test12/dim1: checking position 1 (at 0 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 1 (at 0 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 2 (at 1 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 2 (at 1 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 3 (at 2 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 3 (at 2 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 4 (at 3 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 4 (at 3 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 5 (at 4 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 5 (at 4 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 6 (at 5 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 6 (at 5 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 7 (at 6 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 7 (at 6 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 8 (at 7 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 8 (at 7 secs), expecting value 75.0000000, found 75.0000000, OK
    test12/dim1: checking position 9 (at 8 secs), expecting value 25.0000000, found 25.0000000, OK
    test12/dim2: checking position 9 (at 8 secs), expecting value 75.0000000, found 75.0000000, OK

Running test 'test13':
test incremental values updated in short and long durations
    > test13: feeding position 1
       >> dim1 with value 1000
    > test13: fixing first collection time to be 500000 microseconds to second boundary
    > test13: feeding position 2, after 0.600 seconds (0.600 seconds from start), delta 600.0000000, rate 1000.0000000
       >> dim1 with value 1600
    > test13: feeding position 3, after 0.200 seconds (0.800 seconds from start), delta 200.0000000, rate 1000.0000000
       >> dim1 with value 1800
    > test13: feeding position 4, after 1.000 seconds (1.800 seconds from start), delta 1000.0000000, rate 1000.0000000
       >> dim1 with value 2800
    > test13: feeding position 5, after 0.200 seconds (2.000 seconds from start), delta 200.0000000, rate 1000.0000000
       >> dim1 with value 3000
    > test13: feeding position 6, after 2.000 seconds (4.000 seconds from start), delta 2000.0000000, rate 1000.0000000
       >> dim1 with value 5000
    > test13: feeding position 7, after 0.600 seconds (4.600 seconds from start), delta 600.0000000, rate 1000.0000000
       >> dim1 with value 5600
    > test13: feeding position 8, after 0.400 seconds (5.000 seconds from start), delta 400.0000000, rate 1000.0000000
       >> dim1 with value 6000
    > test13: feeding position 9, after 0.900 seconds (5.900 seconds from start), delta 900.0000000, rate 1000.0000000
       >> dim1 with value 6900
    > test13: feeding position 10, after 1.000 seconds (6.900 seconds from start), delta 1000.0000000, rate 1000.0000000
       >> dim1 with value 7900
    test13/dim1: checking position 1 (at 0 secs), expecting value 83.3333300, found 83.3333300, OK
    test13/dim1: checking position 2 (at 1 secs), expecting value 100.0000000, found 100.0000000, OK
    test13/dim1: checking position 3 (at 2 secs), expecting value 100.0000000, found 100.0000000, OK
    test13/dim1: checking position 4 (at 3 secs), expecting value 100.0000000, found 100.0000000, OK
    test13/dim1: checking position 5 (at 4 secs), expecting value 100.0000000, found 100.0000000, OK
    test13/dim1: checking position 6 (at 5 secs), expecting value 100.0000000, found 100.0000000, OK
    test13/dim1: checking position 7 (at 6 secs), expecting value 100.0000000, found 100.0000000, OK

Running test 'test14':
issue #981 with real data
    > test14: feeding position 1
       >> dim1 with value 95586989362191425
    > test14: fixing first collection time to be 0 microseconds to second boundary
    > test14: feeding position 2, after 13.573 seconds (13.573 seconds from start), delta 337.2634012, rate 24.8481103
       >> dim1 with value 95587031520116573
    > test14: feeding position 3, after 29.969 seconds (43.542 seconds from start), delta 651.0948419, rate 21.7256112
       >> dim1 with value 95587112906971816
    > test14: feeding position 4, after 29.958 seconds (73.500 seconds from start), delta 657.7339008, rate 21.9552006
       >> dim1 with value 95587195123709412
    > test14: feeding position 5, after 30.054 seconds (103.554 seconds from start), delta 655.7575529, rate 21.8193103
       >> dim1 with value 95587277093403523
    > test14: feeding position 6, after 34.952 seconds (138.506 seconds from start), delta 760.0455665, rate 21.7454099
       >> dim1 with value 95587372099099340
    > test14: feeding position 7, after 25.046 seconds (163.552 seconds from start), delta 562.0116668, rate 22.4391786
       >> dim1 with value 95587442350557688
    > test14: feeding position 8, after 29.947 seconds (193.499 seconds from start), delta 671.9548583, rate 22.4381360
       >> dim1 with value 95587526344914973
    > test14: feeding position 9, after 30.054 seconds (223.553 seconds from start), delta 655.3667825, rate 21.8063081
       >> dim1 with value 95587608265762786
    > test14: feeding position 10, after 29.942 seconds (253.495 seconds from start), delta 658.8650515, rate 22.0047108
       >> dim1 with value 95587690623894224
    test14/dim1: checking position 1 (at 18446744073709551612 secs), expecting value 23.1383300, found 23.1383300, OK
    test14/dim1: checking position 2 (at 26 secs), expecting value 21.8515600, found 21.8515600, OK
    test14/dim1: checking position 3 (at 56 secs), expecting value 21.8804600, found 21.8804600, OK
    test14/dim1: checking position 4 (at 86 secs), expecting value 21.7788000, found 21.7788000, OK
    test14/dim1: checking position 5 (at 116 secs), expecting value 22.0112200, found 22.0112200, OK
    test14/dim1: checking position 6 (at 146 secs), expecting value 22.4386100, found 22.4386100, OK
    test14/dim1: checking position 7 (at 176 secs), expecting value 22.0906100, found 22.0906100, OK
    test14/dim1: checking position 8 (at 206 secs), expecting value 21.9150800, found 21.9150800, OK

Running test 'test14b':
issue #981 with dummy data
    > test14b: feeding position 1
       >> dim1 with value 0
    > test14b: fixing first collection time to be 0 microseconds to second boundary
    > test14b: feeding position 2, after 13.573 seconds (13.573 seconds from start), delta 13573000.0000000, rate 1000000.0000000
       >> dim1 with value 13573000
    > test14b: feeding position 3, after 29.969 seconds (43.542 seconds from start), delta 29969000.0000000, rate 1000000.0000000
       >> dim1 with value 43542000
    > test14b: feeding position 4, after 29.958 seconds (73.500 seconds from start), delta 29958000.0000000, rate 1000000.0000000
       >> dim1 with value 73500000
    > test14b: feeding position 5, after 30.054 seconds (103.554 seconds from start), delta 30054000.0000000, rate 1000000.0000000
       >> dim1 with value 103554000
    > test14b: feeding position 6, after 34.952 seconds (138.506 seconds from start), delta 34952000.0000000, rate 1000000.0000000
       >> dim1 with value 138506000
    > test14b: feeding position 7, after 25.046 seconds (163.552 seconds from start), delta 25046000.0000000, rate 1000000.0000000
       >> dim1 with value 163552000
    > test14b: feeding position 8, after 29.947 seconds (193.499 seconds from start), delta 29947000.0000000, rate 1000000.0000000
       >> dim1 with value 193499000
    > test14b: feeding position 9, after 30.054 seconds (223.553 seconds from start), delta 30054000.0000000, rate 1000000.0000000
       >> dim1 with value 223553000
    > test14b: feeding position 10, after 29.942 seconds (253.495 seconds from start), delta 29942000.0000000, rate 1000000.0000000
       >> dim1 with value 253495000
    test14b/dim1: checking position 1 (at 18446744073709551612 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 2 (at 26 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 3 (at 56 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 4 (at 86 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 5 (at 116 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 6 (at 146 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 7 (at 176 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14b/dim1: checking position 8 (at 206 secs), expecting value 1000000.0000000, found 1000000.0000000, OK

Running test 'test14c':
issue #981 with dummy data, checking for late start
    > test14c: feeding position 1
       >> dim1 with value 29000000
    > test14c: fixing first collection time to be 29000000 microseconds to second boundary
    > test14c: feeding position 2, after 1.000 seconds (1.000 seconds from start), delta 1000000.0000000, rate 1000000.0000000
       >> dim1 with value 30000000
    > test14c: feeding position 3, after 30.000 seconds (31.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 60000000
    > test14c: feeding position 4, after 30.000 seconds (61.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 90000000
    > test14c: feeding position 5, after 30.000 seconds (91.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 120000000
    > test14c: feeding position 6, after 30.000 seconds (121.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 150000000
    > test14c: feeding position 7, after 30.000 seconds (151.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 180000000
    > test14c: feeding position 8, after 30.000 seconds (181.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 210000000
    > test14c: feeding position 9, after 30.000 seconds (211.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 240000000
    > test14c: feeding position 10, after 30.000 seconds (241.000 seconds from start), delta 30000000.0000000, rate 1000000.0000000
       >> dim1 with value 270000000
    test14c/dim1: checking position 1 (at 18446744073709551612 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 2 (at 26 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 3 (at 56 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 4 (at 86 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 5 (at 116 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 6 (at 146 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 7 (at 176 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 8 (at 206 secs), expecting value 1000000.0000000, found 1000000.0000000, OK
    test14c/dim1: checking position 9 (at 236 secs), expecting value 1000000.0000000, found 1000000.0000000, OK

Running test 'test15':
test incremental with 2 dimensions
    > test15: feeding position 1
       >> dim1 with value 1068066388
       >> dim2 with value 178825286
    > test15: fixing first collection time to be 0 microseconds to second boundary
    > test15: feeding position 2, after 1.009 seconds (1.009 seconds from start), delta 5908.6718750, rate 5857.4078416
       >> dim1 with value 1068822698
       >> dim2 with value 178825286
    > test15: feeding position 3, after 0.994 seconds (2.003 seconds from start), delta 5862.2968750, rate 5898.8164476
       >> dim1 with value 1069573072
       >> dim2 with value 178825286
    > test15: feeding position 4, after 0.996 seconds (2.998 seconds from start), delta 5867.6796875, rate 5891.7711397
       >> dim1 with value 1070324135
       >> dim2 with value 178825286
    > test15: feeding position 5, after 1.015 seconds (4.013 seconds from start), delta 5890.8671875, rate 5806.3156194
       >> dim1 with value 1071078166
       >> dim2 with value 178825498
    > test15: feeding position 6, after 0.995 seconds (5.008 seconds from start), delta 5884.2421875, rate 5915.6899955
       >> dim1 with value 1071831349
       >> dim2 with value 178825498
    > test15: feeding position 7, after 0.993 seconds (6.001 seconds from start), delta 3159.2968750, rate 3181.1577913
       >> dim1 with value 1072235739
       >> dim2 with value 179165652
    > test15: feeding position 8, after 1.010 seconds (7.011 seconds from start), delta 5649.4687500, rate 5591.6953536
       >> dim1 with value 1072958871
       >> dim2 with value 179202964
    > test15: feeding position 9, after 1.003 seconds (8.015 seconds from start), delta 5844.9062500, rate 5825.1357393
       >> dim1 with value 1073707019
       >> dim2 with value 179203282
    > test15: feeding position 10, after 0.995 seconds (9.010 seconds from start), delta 5884.6562500, rate 5913.0328949
       >> dim1 with value 1074460255
       >> dim2 with value 179204130
    test15/dim1: checking position 1 (at 0 secs), expecting value 5857.4080000, found 5857.4080000, OK
    test15/dim2: checking position 1 (at 0 secs), expecting value 0.0000000, found 0.0000000, OK
    test15/dim1: checking position 2 (at 1 secs), expecting value 5898.4540000, found 5898.4540000, OK
    test15/dim2: checking position 2 (at 1 secs), expecting value 0.0000000, found 0.0000000, OK
    test15/dim1: checking position 3 (at 2 secs), expecting value 5891.6590000, found 5891.6590000, OK
    test15/dim2: checking position 3 (at 2 secs), expecting value 0.0024944, found 0.0024944, OK
    test15/dim1: checking position 4 (at 3 secs), expecting value 5806.3160000, found 5806.3160000, OK
    test15/dim2: checking position 4 (at 3 secs), expecting value 1.6324779, found 1.6324779, OK
    test15/dim1: checking position 5 (at 4 secs), expecting value 5914.2640000, found 5914.2640000, OK
    test15/dim2: checking position 5 (at 4 secs), expecting value 0.0212777, found 0.0212777, OK
    test15/dim1: checking position 6 (at 5 secs), expecting value 3202.2630000, found 3202.2630000, OK
    test15/dim2: checking position 6 (at 5 secs), expecting value 2655.1890000, found 2655.1890000, OK
    test15/dim1: checking position 7 (at 6 secs), expecting value 5589.6560000, found 5589.6560000, OK
    test15/dim2: checking position 7 (at 6 secs), expecting value 290.5387000, found 290.5387000, OK
    test15/dim1: checking position 8 (at 7 secs), expecting value 5822.5260000, found 5822.5260000, OK
    test15/dim2: checking position 8 (at 7 secs), expecting value 5.6733610, found 5.6733610, OK
    test15/dim1: checking position 9 (at 8 secs), expecting value 5911.7520000, found 5911.7520000, OK
    test15/dim2: checking position 9 (at 8 secs), expecting value 6.5960220, found 6.5960220, OK
-0.0000010 original
-0.0000010 packed and unpacked, (stored as 0xB900000A, diff -0.0000000, 0.0000000%)
-0.000001 printed after unpacked (9 bytes)
-0.0000010 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000100 original
-0.0000100 packed and unpacked, (stored as 0xB9000064, diff -0.0000000, 0.0000000%)
-0.00001 printed after unpacked (8 bytes)
-0.0000100 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0001000 original
-0.0001000 packed and unpacked, (stored as 0xB90003E8, diff -0.0000000, 0.0000000%)
-0.0001 printed after unpacked (7 bytes)
-0.0001000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0010000 original
-0.0010000 packed and unpacked, (stored as 0xB9002710, diff -0.0000000, 0.0000000%)
-0.001 printed after unpacked (6 bytes)
-0.0010000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0100000 original
-0.0100000 packed and unpacked, (stored as 0xB90186A0, diff -0.0000000, 0.0000000%)
-0.01 printed after unpacked (5 bytes)
-0.0100000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.1000000 original
-0.1000000 packed and unpacked, (stored as 0xB90F4240, diff -0.0000000, 0.0000000%)
-0.1 printed after unpacked (4 bytes)
-0.1000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-1.0000000 original
-1.0000000 packed and unpacked, (stored as 0xB9989680, diff -0.0000000, 0.0000000%)
-1 printed after unpacked (2 bytes)
-1.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-10.0000000 original
-10.0000000 packed and unpacked, (stored as 0xB1989680, diff -0.0000000, 0.0000000%)
-10 printed after unpacked (3 bytes)
-10.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-100.0000000 original
-100.0000000 packed and unpacked, (stored as 0xA9989680, diff -0.0000000, 0.0000000%)
-100 printed after unpacked (4 bytes)
-100.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-1000.0000000 original
-1000.0000000 packed and unpacked, (stored as 0xA1989680, diff -0.0000000, 0.0000000%)
-1000 printed after unpacked (5 bytes)
-1000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-10000.0000000 original
-10000.0000000 packed and unpacked, (stored as 0x99989680, diff -0.0000000, 0.0000000%)
-10000 printed after unpacked (6 bytes)
-10000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-100000.0000000 original
-100000.0000000 packed and unpacked, (stored as 0x91989680, diff -0.0000000, 0.0000000%)
-100000 printed after unpacked (7 bytes)
-100000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-1000000.0000000 original
-1000000.0000000 packed and unpacked, (stored as 0x89989680, diff -0.0000000, 0.0000000%)
-1000000 printed after unpacked (8 bytes)
-1000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-10000000.0000000 original
-10000000.0000000 packed and unpacked, (stored as 0x81989680, diff -0.0000000, 0.0000000%)
-10000000 printed after unpacked (9 bytes)
-10000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-100000000.0000000 original
-100000000.0000000 packed and unpacked, (stored as 0xC9989680, diff -0.0000000, 0.0000000%)
-100000000 printed after unpacked (10 bytes)
-100000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-1000000000.0000000 original
-1000000000.0000000 packed and unpacked, (stored as 0xD1989680, diff -0.0000000, 0.0000000%)
-1000000000 printed after unpacked (11 bytes)
-1000000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-9999999999.9999995 original
-10000000000.0000000 packed and unpacked, (stored as 0xD9989680, diff -0.0000005, 0.0000000%)
-10000000000 printed after unpacked (12 bytes)
-10000000000.0000000 re-parsed from printed (diff 0.0000005, 0.0000000%)

-99999999999.9999955 original
-100000000000.0000000 packed and unpacked, (stored as 0xE1989680, diff -0.0000045, 0.0000000%)
-100000000000 printed after unpacked (13 bytes)
-100000000000.0000000 re-parsed from printed (diff 0.0000045, 0.0000000%)

-999999999999.9999547 original
-1000000000000.0000000 packed and unpacked, (stored as 0xE9989680, diff -0.0000453, 0.0000000%)
-1000000000000 printed after unpacked (14 bytes)
-1000000000000.0000000 re-parsed from printed (diff 0.0000453, 0.0000000%)

-9999999999999.9995475 original
-10000000000000.0000000 packed and unpacked, (stored as 0xF1989680, diff -0.0004525, 0.0000000%)
-10000000000000 printed after unpacked (15 bytes)
-10000000000000.0000000 re-parsed from printed (diff 0.0004525, 0.0000000%)

-0.0000002 original
-0.0000002 packed and unpacked, (stored as 0xB9000002, diff -0.0000000, 0.0000000%)
-0.0000002 printed after unpacked (10 bytes)
-0.0000002 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000020 original
-0.0000020 packed and unpacked, (stored as 0xB9000014, diff -0.0000000, 0.0000000%)
-0.000002 printed after unpacked (9 bytes)
-0.0000020 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000200 original
-0.0000200 packed and unpacked, (stored as 0xB90000C8, diff -0.0000000, 0.0000000%)
-0.00002 printed after unpacked (8 bytes)
-0.0000200 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0002000 original
-0.0002000 packed and unpacked, (stored as 0xB90007D0, diff -0.0000000, 0.0000000%)
-0.0002 printed after unpacked (7 bytes)
-0.0002000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0020000 original
-0.0020000 packed and unpacked, (stored as 0xB9004E20, diff -0.0000000, 0.0000000%)
-0.002 printed after unpacked (6 bytes)
-0.0020000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0200000 original
-0.0200000 packed and unpacked, (stored as 0xB9030D40, diff -0.0000000, 0.0000000%)
-0.02 printed after unpacked (5 bytes)
-0.0200000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.2000000 original
-0.2000000 packed and unpacked, (stored as 0xB91E8480, diff -0.0000000, 0.0000000%)
-0.2 printed after unpacked (4 bytes)
-0.2000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-2.0000000 original
-2.0000000 packed and unpacked, (stored as 0xB11E8480, diff -0.0000000, 0.0000000%)
-2 printed after unpacked (2 bytes)
-2.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-20.0000000 original
-20.0000000 packed and unpacked, (stored as 0xA91E8480, diff -0.0000000, 0.0000000%)
-20 printed after unpacked (3 bytes)
-20.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-200.0000000 original
-200.0000000 packed and unpacked, (stored as 0xA11E8480, diff -0.0000000, 0.0000000%)
-200 printed after unpacked (4 bytes)
-200.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-2000.0000000 original
-2000.0000000 packed and unpacked, (stored as 0x991E8480, diff -0.0000000, 0.0000000%)
-2000 printed after unpacked (5 bytes)
-2000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-20000.0000000 original
-20000.0000000 packed and unpacked, (stored as 0x911E8480, diff -0.0000000, 0.0000000%)
-20000 printed after unpacked (6 bytes)
-20000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-200000.0000000 original
-200000.0000000 packed and unpacked, (stored as 0x891E8480, diff -0.0000000, 0.0000000%)
-200000 printed after unpacked (7 bytes)
-200000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-2000000.0000000 original
-2000000.0000000 packed and unpacked, (stored as 0x811E8480, diff -0.0000000, 0.0000000%)
-2000000 printed after unpacked (8 bytes)
-2000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-20000000.0000000 original
-20000000.0000000 packed and unpacked, (stored as 0xC91E8480, diff -0.0000000, 0.0000000%)
-20000000 printed after unpacked (9 bytes)
-20000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-200000000.0000000 original
-200000000.0000000 packed and unpacked, (stored as 0xD11E8480, diff -0.0000000, 0.0000000%)
-200000000 printed after unpacked (10 bytes)
-200000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-1999999999.9999999 original
-2000000000.0000000 packed and unpacked, (stored as 0xD91E8480, diff -0.0000001, 0.0000000%)
-2000000000 printed after unpacked (11 bytes)
-2000000000.0000000 re-parsed from printed (diff 0.0000001, 0.0000000%)

-19999999999.9999991 original
-20000000000.0000000 packed and unpacked, (stored as 0xE11E8480, diff -0.0000009, 0.0000000%)
-20000000000 printed after unpacked (12 bytes)
-20000000000.0000000 re-parsed from printed (diff 0.0000009, 0.0000000%)

-199999999999.9999909 original
-200000000000.0000000 packed and unpacked, (stored as 0xE91E8480, diff -0.0000091, 0.0000000%)
-200000000000 printed after unpacked (13 bytes)
-200000000000.0000000 re-parsed from printed (diff 0.0000091, 0.0000000%)

-1999999999999.9999095 original
-2000000000000.0000000 packed and unpacked, (stored as 0xF11E8480, diff -0.0000905, 0.0000000%)
-2000000000000 printed after unpacked (14 bytes)
-2000000000000.0000000 re-parsed from printed (diff 0.0000905, 0.0000000%)

-19999999999999.9990950 original
-20000000000000.0000000 packed and unpacked, (stored as 0xF91E8480, diff -0.0009050, 0.0000000%)
-20000000000000 printed after unpacked (15 bytes)
-20000000000000.0000000 re-parsed from printed (diff 0.0009050, 0.0000000%)

-0.0000003 original
-0.0000003 packed and unpacked, (stored as 0xB9000003, diff -0.0000000, 0.0000000%)
-0.0000003 printed after unpacked (10 bytes)
-0.0000003 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000030 original
-0.0000030 packed and unpacked, (stored as 0xB900001E, diff -0.0000000, 0.0000000%)
-0.000003 printed after unpacked (9 bytes)
-0.0000030 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000300 original
-0.0000300 packed and unpacked, (stored as 0xB900012C, diff -0.0000000, 0.0000000%)
-0.00003 printed after unpacked (8 bytes)
-0.0000300 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0003000 original
-0.0003000 packed and unpacked, (stored as 0xB9000BB8, diff -0.0000000, 0.0000000%)
-0.0003 printed after unpacked (7 bytes)
-0.0003000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0030000 original
-0.0030000 packed and unpacked, (stored as 0xB9007530, diff -0.0000000, 0.0000000%)
-0.003 printed after unpacked (6 bytes)
-0.0030000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0300000 original
-0.0300000 packed and unpacked, (stored as 0xB90493E0, diff -0.0000000, 0.0000000%)
-0.03 printed after unpacked (5 bytes)
-0.0300000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.3000000 original
-0.3000000 packed and unpacked, (stored as 0xB92DC6C0, diff -0.0000000, 0.0000000%)
-0.3 printed after unpacked (4 bytes)
-0.3000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-3.0000000 original
-3.0000000 packed and unpacked, (stored as 0xB12DC6C0, diff -0.0000000, 0.0000000%)
-3 printed after unpacked (2 bytes)
-3.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-30.0000000 original
-30.0000000 packed and unpacked, (stored as 0xA92DC6C0, diff -0.0000000, 0.0000000%)
-30 printed after unpacked (3 bytes)
-30.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-300.0000000 original
-300.0000000 packed and unpacked, (stored as 0xA12DC6C0, diff -0.0000000, 0.0000000%)
-300 printed after unpacked (4 bytes)
-300.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-3000.0000000 original
-3000.0000000 packed and unpacked, (stored as 0x992DC6C0, diff -0.0000000, 0.0000000%)
-3000 printed after unpacked (5 bytes)
-3000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-30000.0000000 original
-30000.0000000 packed and unpacked, (stored as 0x912DC6C0, diff -0.0000000, 0.0000000%)
-30000 printed after unpacked (6 bytes)
-30000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-300000.0000000 original
-300000.0000000 packed and unpacked, (stored as 0x892DC6C0, diff -0.0000000, 0.0000000%)
-300000 printed after unpacked (7 bytes)
-300000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-3000000.0000000 original
-3000000.0000000 packed and unpacked, (stored as 0x812DC6C0, diff -0.0000000, 0.0000000%)
-3000000 printed after unpacked (8 bytes)
-3000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-30000000.0000000 original
-30000000.0000000 packed and unpacked, (stored as 0xC92DC6C0, diff -0.0000000, 0.0000000%)
-30000000 printed after unpacked (9 bytes)
-30000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-300000000.0000000 original
-300000000.0000000 packed and unpacked, (stored as 0xD12DC6C0, diff -0.0000000, 0.0000000%)
-300000000 printed after unpacked (10 bytes)
-300000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-2999999999.9999999 original
-3000000000.0000000 packed and unpacked, (stored as 0xD92DC6C0, diff -0.0000001, 0.0000000%)
-3000000000 printed after unpacked (11 bytes)
-3000000000.0000000 re-parsed from printed (diff 0.0000001, 0.0000000%)

-29999999999.9999986 original
-30000000000.0000000 packed and unpacked, (stored as 0xE12DC6C0, diff -0.0000014, 0.0000000%)
-30000000000 printed after unpacked (12 bytes)
-30000000000.0000000 re-parsed from printed (diff 0.0000014, 0.0000000%)

-299999999999.9999864 original
-300000000000.0000000 packed and unpacked, (stored as 0xE92DC6C0, diff -0.0000136, 0.0000000%)
-300000000000 printed after unpacked (13 bytes)
-300000000000.0000000 re-parsed from printed (diff 0.0000136, 0.0000000%)

-2999999999999.9998642 original
-3000000000000.0000000 packed and unpacked, (stored as 0xF12DC6C0, diff -0.0001358, 0.0000000%)
-3000000000000 printed after unpacked (14 bytes)
-3000000000000.0000000 re-parsed from printed (diff 0.0001358, 0.0000000%)

-29999999999999.9986424 original
-30000000000000.0000000 packed and unpacked, (stored as 0xF92DC6C0, diff -0.0013576, 0.0000000%)
-30000000000000 printed after unpacked (15 bytes)
-30000000000000.0000000 re-parsed from printed (diff 0.0013576, 0.0000000%)

-0.0000004 original
-0.0000004 packed and unpacked, (stored as 0xB9000004, diff -0.0000000, 0.0000000%)
-0.0000004 printed after unpacked (10 bytes)
-0.0000004 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000040 original
-0.0000040 packed and unpacked, (stored as 0xB9000028, diff -0.0000000, 0.0000000%)
-0.000004 printed after unpacked (9 bytes)
-0.0000040 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000400 original
-0.0000400 packed and unpacked, (stored as 0xB9000190, diff -0.0000000, 0.0000000%)
-0.00004 printed after unpacked (8 bytes)
-0.0000400 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0004000 original
-0.0004000 packed and unpacked, (stored as 0xB9000FA0, diff -0.0000000, 0.0000000%)
-0.0004 printed after unpacked (7 bytes)
-0.0004000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0040000 original
-0.0040000 packed and unpacked, (stored as 0xB9009C40, diff -0.0000000, 0.0000000%)
-0.004 printed after unpacked (6 bytes)
-0.0040000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0400000 original
-0.0400000 packed and unpacked, (stored as 0xB9061A80, diff -0.0000000, 0.0000000%)
-0.04 printed after unpacked (5 bytes)
-0.0400000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.4000000 original
-0.4000000 packed and unpacked, (stored as 0xB93D0900, diff -0.0000000, 0.0000000%)
-0.4 printed after unpacked (4 bytes)
-0.4000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-4.0000000 original
-4.0000000 packed and unpacked, (stored as 0xB13D0900, diff -0.0000000, 0.0000000%)
-4 printed after unpacked (2 bytes)
-4.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-40.0000000 original
-40.0000000 packed and unpacked, (stored as 0xA93D0900, diff -0.0000000, 0.0000000%)
-40 printed after unpacked (3 bytes)
-40.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-400.0000000 original
-400.0000000 packed and unpacked, (stored as 0xA13D0900, diff -0.0000000, 0.0000000%)
-400 printed after unpacked (4 bytes)
-400.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-4000.0000000 original
-4000.0000000 packed and unpacked, (stored as 0x993D0900, diff -0.0000000, 0.0000000%)
-4000 printed after unpacked (5 bytes)
-4000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-40000.0000000 original
-40000.0000000 packed and unpacked, (stored as 0x913D0900, diff -0.0000000, 0.0000000%)
-40000 printed after unpacked (6 bytes)
-40000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-400000.0000000 original
-400000.0000000 packed and unpacked, (stored as 0x893D0900, diff -0.0000000, 0.0000000%)
-400000 printed after unpacked (7 bytes)
-400000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-4000000.0000000 original
-4000000.0000000 packed and unpacked, (stored as 0x813D0900, diff -0.0000000, 0.0000000%)
-4000000 printed after unpacked (8 bytes)
-4000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-40000000.0000000 original
-40000000.0000000 packed and unpacked, (stored as 0xC93D0900, diff -0.0000000, 0.0000000%)
-40000000 printed after unpacked (9 bytes)
-40000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-400000000.0000000 original
-400000000.0000000 packed and unpacked, (stored as 0xD13D0900, diff -0.0000000, 0.0000000%)
-400000000 printed after unpacked (10 bytes)
-400000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-3999999999.9999998 original
-4000000000.0000000 packed and unpacked, (stored as 0xD93D0900, diff -0.0000002, 0.0000000%)
-4000000000 printed after unpacked (11 bytes)
-4000000000.0000000 re-parsed from printed (diff 0.0000002, 0.0000000%)

-39999999999.9999982 original
-40000000000.0000000 packed and unpacked, (stored as 0xE13D0900, diff -0.0000018, 0.0000000%)
-40000000000 printed after unpacked (12 bytes)
-40000000000.0000000 re-parsed from printed (diff 0.0000018, 0.0000000%)

-399999999999.9999819 original
-400000000000.0000000 packed and unpacked, (stored as 0xE93D0900, diff -0.0000181, 0.0000000%)
-400000000000 printed after unpacked (13 bytes)
-400000000000.0000000 re-parsed from printed (diff 0.0000181, 0.0000000%)

-3999999999999.9998190 original
-4000000000000.0000000 packed and unpacked, (stored as 0xF13D0900, diff -0.0001810, 0.0000000%)
-4000000000000 printed after unpacked (14 bytes)
-4000000000000.0000000 re-parsed from printed (diff 0.0001810, 0.0000000%)

-39999999999999.9981899 original
-40000000000000.0000000 packed and unpacked, (stored as 0xF93D0900, diff -0.0018101, 0.0000000%)
-40000000000000 printed after unpacked (15 bytes)
-40000000000000.0000000 re-parsed from printed (diff 0.0018101, 0.0000000%)

-0.0000005 original
-0.0000005 packed and unpacked, (stored as 0xB9000005, diff -0.0000000, 0.0000000%)
-0.0000005 printed after unpacked (10 bytes)
-0.0000005 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000050 original
-0.0000050 packed and unpacked, (stored as 0xB9000032, diff -0.0000000, 0.0000000%)
-0.000005 printed after unpacked (9 bytes)
-0.0000050 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000500 original
-0.0000500 packed and unpacked, (stored as 0xB90001F4, diff -0.0000000, 0.0000000%)
-0.00005 printed after unpacked (8 bytes)
-0.0000500 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0005000 original
-0.0005000 packed and unpacked, (stored as 0xB9001388, diff -0.0000000, 0.0000000%)
-0.0005 printed after unpacked (7 bytes)
-0.0005000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0050000 original
-0.0050000 packed and unpacked, (stored as 0xB900C350, diff -0.0000000, 0.0000000%)
-0.005 printed after unpacked (6 bytes)
-0.0050000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0500000 original
-0.0500000 packed and unpacked, (stored as 0xB907A120, diff -0.0000000, 0.0000000%)
-0.05 printed after unpacked (5 bytes)
-0.0500000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.5000000 original
-0.5000000 packed and unpacked, (stored as 0xB94C4B40, diff -0.0000000, 0.0000000%)
-0.5 printed after unpacked (4 bytes)
-0.5000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-5.0000000 original
-5.0000000 packed and unpacked, (stored as 0xB14C4B40, diff -0.0000000, 0.0000000%)
-5 printed after unpacked (2 bytes)
-5.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-50.0000000 original
-50.0000000 packed and unpacked, (stored as 0xA94C4B40, diff -0.0000000, 0.0000000%)
-50 printed after unpacked (3 bytes)
-50.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-500.0000000 original
-500.0000000 packed and unpacked, (stored as 0xA14C4B40, diff -0.0000000, 0.0000000%)
-500 printed after unpacked (4 bytes)
-500.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-5000.0000000 original
-5000.0000000 packed and unpacked, (stored as 0x994C4B40, diff -0.0000000, 0.0000000%)
-5000 printed after unpacked (5 bytes)
-5000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-50000.0000000 original
-50000.0000000 packed and unpacked, (stored as 0x914C4B40, diff -0.0000000, 0.0000000%)
-50000 printed after unpacked (6 bytes)
-50000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-500000.0000000 original
-500000.0000000 packed and unpacked, (stored as 0x894C4B40, diff -0.0000000, 0.0000000%)
-500000 printed after unpacked (7 bytes)
-500000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-5000000.0000000 original
-5000000.0000000 packed and unpacked, (stored as 0x814C4B40, diff -0.0000000, 0.0000000%)
-5000000 printed after unpacked (8 bytes)
-5000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-50000000.0000000 original
-50000000.0000000 packed and unpacked, (stored as 0xC94C4B40, diff -0.0000000, 0.0000000%)
-50000000 printed after unpacked (9 bytes)
-50000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-500000000.0000000 original
-500000000.0000000 packed and unpacked, (stored as 0xD14C4B40, diff -0.0000000, 0.0000000%)
-500000000 printed after unpacked (10 bytes)
-500000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-4999999999.9999998 original
-5000000000.0000000 packed and unpacked, (stored as 0xD94C4B40, diff -0.0000002, 0.0000000%)
-5000000000 printed after unpacked (11 bytes)
-5000000000.0000000 re-parsed from printed (diff 0.0000002, 0.0000000%)

-49999999999.9999977 original
-50000000000.0000000 packed and unpacked, (stored as 0xE14C4B40, diff -0.0000023, 0.0000000%)
-50000000000 printed after unpacked (12 bytes)
-50000000000.0000000 re-parsed from printed (diff 0.0000023, 0.0000000%)

-499999999999.9999774 original
-500000000000.0000000 packed and unpacked, (stored as 0xE94C4B40, diff -0.0000226, 0.0000000%)
-500000000000 printed after unpacked (13 bytes)
-500000000000.0000000 re-parsed from printed (diff 0.0000226, 0.0000000%)

-4999999999999.9997737 original
-5000000000000.0000000 packed and unpacked, (stored as 0xF14C4B40, diff -0.0002263, 0.0000000%)
-5000000000000 printed after unpacked (14 bytes)
-5000000000000.0000000 re-parsed from printed (diff 0.0002263, 0.0000000%)

-49999999999999.9977374 original
-50000000000000.0000000 packed and unpacked, (stored as 0xF94C4B40, diff -0.0022626, 0.0000000%)
-50000000000000 printed after unpacked (15 bytes)
-50000000000000.0000000 re-parsed from printed (diff 0.0022626, 0.0000000%)

-0.0000006 original
-0.0000006 packed and unpacked, (stored as 0xB9000006, diff -0.0000000, 0.0000000%)
-0.0000006 printed after unpacked (10 bytes)
-0.0000006 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000060 original
-0.0000060 packed and unpacked, (stored as 0xB900003C, diff -0.0000000, 0.0000000%)
-0.000006 printed after unpacked (9 bytes)
-0.0000060 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000600 original
-0.0000600 packed and unpacked, (stored as 0xB9000258, diff -0.0000000, 0.0000000%)
-0.00006 printed after unpacked (8 bytes)
-0.0000600 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0006000 original
-0.0006000 packed and unpacked, (stored as 0xB9001770, diff -0.0000000, 0.0000000%)
-0.0006 printed after unpacked (7 bytes)
-0.0006000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0060000 original
-0.0060000 packed and unpacked, (stored as 0xB900EA60, diff -0.0000000, 0.0000000%)
-0.006 printed after unpacked (6 bytes)
-0.0060000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0600000 original
-0.0600000 packed and unpacked, (stored as 0xB90927C0, diff -0.0000000, 0.0000000%)
-0.06 printed after unpacked (5 bytes)
-0.0600000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.6000000 original
-0.6000000 packed and unpacked, (stored as 0xB95B8D80, diff -0.0000000, 0.0000000%)
-0.6 printed after unpacked (4 bytes)
-0.6000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-6.0000000 original
-6.0000000 packed and unpacked, (stored as 0xB15B8D80, diff -0.0000000, 0.0000000%)
-6 printed after unpacked (2 bytes)
-6.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-60.0000000 original
-60.0000000 packed and unpacked, (stored as 0xA95B8D80, diff -0.0000000, 0.0000000%)
-60 printed after unpacked (3 bytes)
-60.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-600.0000000 original
-600.0000000 packed and unpacked, (stored as 0xA15B8D80, diff -0.0000000, 0.0000000%)
-600 printed after unpacked (4 bytes)
-600.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-6000.0000000 original
-6000.0000000 packed and unpacked, (stored as 0x995B8D80, diff -0.0000000, 0.0000000%)
-6000 printed after unpacked (5 bytes)
-6000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-60000.0000000 original
-60000.0000000 packed and unpacked, (stored as 0x915B8D80, diff -0.0000000, 0.0000000%)
-60000 printed after unpacked (6 bytes)
-60000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-600000.0000000 original
-600000.0000000 packed and unpacked, (stored as 0x895B8D80, diff -0.0000000, 0.0000000%)
-600000 printed after unpacked (7 bytes)
-600000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-6000000.0000000 original
-6000000.0000000 packed and unpacked, (stored as 0x815B8D80, diff -0.0000000, 0.0000000%)
-6000000 printed after unpacked (8 bytes)
-6000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-60000000.0000000 original
-60000000.0000000 packed and unpacked, (stored as 0xC95B8D80, diff -0.0000000, 0.0000000%)
-60000000 printed after unpacked (9 bytes)
-60000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-600000000.0000000 original
-600000000.0000000 packed and unpacked, (stored as 0xD15B8D80, diff -0.0000000, 0.0000000%)
-600000000 printed after unpacked (10 bytes)
-600000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-5999999999.9999997 original
-6000000000.0000000 packed and unpacked, (stored as 0xD95B8D80, diff -0.0000003, 0.0000000%)
-6000000000 printed after unpacked (11 bytes)
-6000000000.0000000 re-parsed from printed (diff 0.0000003, 0.0000000%)

-59999999999.9999973 original
-60000000000.0000000 packed and unpacked, (stored as 0xE15B8D80, diff -0.0000027, 0.0000000%)
-60000000000 printed after unpacked (12 bytes)
-60000000000.0000000 re-parsed from printed (diff 0.0000027, 0.0000000%)

-599999999999.9999728 original
-600000000000.0000000 packed and unpacked, (stored as 0xE95B8D80, diff -0.0000272, 0.0000000%)
-600000000000 printed after unpacked (13 bytes)
-600000000000.0000000 re-parsed from printed (diff 0.0000272, 0.0000000%)

-5999999999999.9997285 original
-6000000000000.0000000 packed and unpacked, (stored as 0xF15B8D80, diff -0.0002715, 0.0000000%)
-6000000000000 printed after unpacked (14 bytes)
-6000000000000.0000000 re-parsed from printed (diff 0.0002715, 0.0000000%)

-59999999999999.9972849 original
-60000000000000.0000000 packed and unpacked, (stored as 0xF95B8D80, diff -0.0027151, 0.0000000%)
-60000000000000 printed after unpacked (15 bytes)
-60000000000000.0000000 re-parsed from printed (diff 0.0027151, 0.0000000%)

-0.0000007 original
-0.0000007 packed and unpacked, (stored as 0xB9000007, diff -0.0000000, 0.0000000%)
-0.0000007 printed after unpacked (10 bytes)
-0.0000007 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000070 original
-0.0000070 packed and unpacked, (stored as 0xB9000046, diff -0.0000000, 0.0000000%)
-0.000007 printed after unpacked (9 bytes)
-0.0000070 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000700 original
-0.0000700 packed and unpacked, (stored as 0xB90002BC, diff -0.0000000, 0.0000000%)
-0.00007 printed after unpacked (8 bytes)
-0.0000700 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0007000 original
-0.0007000 packed and unpacked, (stored as 0xB9001B58, diff -0.0000000, 0.0000000%)
-0.0007 printed after unpacked (7 bytes)
-0.0007000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0070000 original
-0.0070000 packed and unpacked, (stored as 0xB9011170, diff -0.0000000, 0.0000000%)
-0.007 printed after unpacked (6 bytes)
-0.0070000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0700000 original
-0.0700000 packed and unpacked, (stored as 0xB90AAE60, diff -0.0000000, 0.0000000%)
-0.07 printed after unpacked (5 bytes)
-0.0700000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.7000000 original
-0.7000000 packed and unpacked, (stored as 0xB96ACFC0, diff -0.0000000, 0.0000000%)
-0.7 printed after unpacked (4 bytes)
-0.7000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-7.0000000 original
-7.0000000 packed and unpacked, (stored as 0xB16ACFC0, diff -0.0000000, 0.0000000%)
-7 printed after unpacked (2 bytes)
-7.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-70.0000000 original
-70.0000000 packed and unpacked, (stored as 0xA96ACFC0, diff -0.0000000, 0.0000000%)
-70 printed after unpacked (3 bytes)
-70.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-700.0000000 original
-700.0000000 packed and unpacked, (stored as 0xA16ACFC0, diff -0.0000000, 0.0000000%)
-700 printed after unpacked (4 bytes)
-700.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-7000.0000000 original
-7000.0000000 packed and unpacked, (stored as 0x996ACFC0, diff -0.0000000, 0.0000000%)
-7000 printed after unpacked (5 bytes)
-7000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-70000.0000000 original
-70000.0000000 packed and unpacked, (stored as 0x916ACFC0, diff -0.0000000, 0.0000000%)
-70000 printed after unpacked (6 bytes)
-70000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-700000.0000000 original
-700000.0000000 packed and unpacked, (stored as 0x896ACFC0, diff -0.0000000, 0.0000000%)
-700000 printed after unpacked (7 bytes)
-700000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-7000000.0000000 original
-7000000.0000000 packed and unpacked, (stored as 0x816ACFC0, diff -0.0000000, 0.0000000%)
-7000000 printed after unpacked (8 bytes)
-7000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-70000000.0000000 original
-70000000.0000000 packed and unpacked, (stored as 0xC96ACFC0, diff -0.0000000, 0.0000000%)
-70000000 printed after unpacked (9 bytes)
-70000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-700000000.0000000 original
-700000000.0000000 packed and unpacked, (stored as 0xD16ACFC0, diff -0.0000000, 0.0000000%)
-700000000 printed after unpacked (10 bytes)
-700000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-6999999999.9999997 original
-7000000000.0000000 packed and unpacked, (stored as 0xD96ACFC0, diff -0.0000003, 0.0000000%)
-7000000000 printed after unpacked (11 bytes)
-7000000000.0000000 re-parsed from printed (diff 0.0000003, 0.0000000%)

-69999999999.9999968 original
-70000000000.0000000 packed and unpacked, (stored as 0xE16ACFC0, diff -0.0000032, 0.0000000%)
-70000000000 printed after unpacked (12 bytes)
-70000000000.0000000 re-parsed from printed (diff 0.0000032, 0.0000000%)

-699999999999.9999683 original
-700000000000.0000000 packed and unpacked, (stored as 0xE96ACFC0, diff -0.0000317, 0.0000000%)
-700000000000 printed after unpacked (13 bytes)
-700000000000.0000000 re-parsed from printed (diff 0.0000317, 0.0000000%)

-6999999999999.9996832 original
-7000000000000.0000000 packed and unpacked, (stored as 0xF16ACFC0, diff -0.0003168, 0.0000000%)
-7000000000000 printed after unpacked (14 bytes)
-7000000000000.0000000 re-parsed from printed (diff 0.0003168, 0.0000000%)

-69999999999999.9968324 original
-70000000000000.0000000 packed and unpacked, (stored as 0xF96ACFC0, diff -0.0031676, 0.0000000%)
-70000000000000 printed after unpacked (15 bytes)
-70000000000000.0000000 re-parsed from printed (diff 0.0031676, 0.0000000%)

-0.0000008 original
-0.0000008 packed and unpacked, (stored as 0xB9000008, diff -0.0000000, 0.0000000%)
-0.0000008 printed after unpacked (10 bytes)
-0.0000008 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000080 original
-0.0000080 packed and unpacked, (stored as 0xB9000050, diff -0.0000000, 0.0000000%)
-0.000008 printed after unpacked (9 bytes)
-0.0000080 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000800 original
-0.0000800 packed and unpacked, (stored as 0xB9000320, diff -0.0000000, 0.0000000%)
-0.00008 printed after unpacked (8 bytes)
-0.0000800 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0008000 original
-0.0008000 packed and unpacked, (stored as 0xB9001F40, diff -0.0000000, 0.0000000%)
-0.0008 printed after unpacked (7 bytes)
-0.0008000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0080000 original
-0.0080000 packed and unpacked, (stored as 0xB9013880, diff -0.0000000, 0.0000000%)
-0.008 printed after unpacked (6 bytes)
-0.0080000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0800000 original
-0.0800000 packed and unpacked, (stored as 0xB90C3500, diff -0.0000000, 0.0000000%)
-0.08 printed after unpacked (5 bytes)
-0.0800000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.8000000 original
-0.8000000 packed and unpacked, (stored as 0xB97A1200, diff -0.0000000, 0.0000000%)
-0.8 printed after unpacked (4 bytes)
-0.8000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-8.0000000 original
-8.0000000 packed and unpacked, (stored as 0xB17A1200, diff -0.0000000, 0.0000000%)
-8 printed after unpacked (2 bytes)
-8.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-80.0000000 original
-80.0000000 packed and unpacked, (stored as 0xA97A1200, diff -0.0000000, 0.0000000%)
-80 printed after unpacked (3 bytes)
-80.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-800.0000000 original
-800.0000000 packed and unpacked, (stored as 0xA17A1200, diff -0.0000000, 0.0000000%)
-800 printed after unpacked (4 bytes)
-800.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-8000.0000000 original
-8000.0000000 packed and unpacked, (stored as 0x997A1200, diff -0.0000000, 0.0000000%)
-8000 printed after unpacked (5 bytes)
-8000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-80000.0000000 original
-80000.0000000 packed and unpacked, (stored as 0x917A1200, diff -0.0000000, 0.0000000%)
-80000 printed after unpacked (6 bytes)
-80000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-800000.0000000 original
-800000.0000000 packed and unpacked, (stored as 0x897A1200, diff -0.0000000, 0.0000000%)
-800000 printed after unpacked (7 bytes)
-800000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-8000000.0000000 original
-8000000.0000000 packed and unpacked, (stored as 0x817A1200, diff -0.0000000, 0.0000000%)
-8000000 printed after unpacked (8 bytes)
-8000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-80000000.0000000 original
-80000000.0000000 packed and unpacked, (stored as 0xC97A1200, diff -0.0000000, 0.0000000%)
-80000000 printed after unpacked (9 bytes)
-80000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-800000000.0000000 original
-800000000.0000000 packed and unpacked, (stored as 0xD17A1200, diff -0.0000000, 0.0000000%)
-800000000 printed after unpacked (10 bytes)
-800000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-7999999999.9999996 original
-8000000000.0000000 packed and unpacked, (stored as 0xD97A1200, diff -0.0000004, 0.0000000%)
-8000000000 printed after unpacked (11 bytes)
-8000000000.0000000 re-parsed from printed (diff 0.0000004, 0.0000000%)

-79999999999.9999964 original
-80000000000.0000000 packed and unpacked, (stored as 0xE17A1200, diff -0.0000036, 0.0000000%)
-80000000000 printed after unpacked (12 bytes)
-80000000000.0000000 re-parsed from printed (diff 0.0000036, 0.0000000%)

-799999999999.9999638 original
-800000000000.0000000 packed and unpacked, (stored as 0xE97A1200, diff -0.0000362, 0.0000000%)
-800000000000 printed after unpacked (13 bytes)
-800000000000.0000000 re-parsed from printed (diff 0.0000362, 0.0000000%)

-7999999999999.9996380 original
-8000000000000.0000000 packed and unpacked, (stored as 0xF17A1200, diff -0.0003620, 0.0000000%)
-8000000000000 printed after unpacked (14 bytes)
-8000000000000.0000000 re-parsed from printed (diff 0.0003620, 0.0000000%)

-79999999999999.9963798 original
-80000000000000.0000000 packed and unpacked, (stored as 0xF97A1200, diff -0.0036202, 0.0000000%)
-80000000000000 printed after unpacked (15 bytes)
-80000000000000.0000000 re-parsed from printed (diff 0.0036202, 0.0000000%)

-0.0000009 original
-0.0000009 packed and unpacked, (stored as 0xB9000009, diff -0.0000000, 0.0000000%)
-0.0000009 printed after unpacked (10 bytes)
-0.0000009 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000090 original
-0.0000090 packed and unpacked, (stored as 0xB900005A, diff -0.0000000, 0.0000000%)
-0.000009 printed after unpacked (9 bytes)
-0.0000090 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0000900 original
-0.0000900 packed and unpacked, (stored as 0xB9000384, diff -0.0000000, 0.0000000%)
-0.00009 printed after unpacked (8 bytes)
-0.0000900 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0009000 original
-0.0009000 packed and unpacked, (stored as 0xB9002328, diff -0.0000000, 0.0000000%)
-0.0009 printed after unpacked (7 bytes)
-0.0009000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0090000 original
-0.0090000 packed and unpacked, (stored as 0xB9015F90, diff -0.0000000, 0.0000000%)
-0.009 printed after unpacked (6 bytes)
-0.0090000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.0900000 original
-0.0900000 packed and unpacked, (stored as 0xB90DBBA0, diff -0.0000000, 0.0000000%)
-0.09 printed after unpacked (5 bytes)
-0.0900000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-0.9000000 original
-0.9000000 packed and unpacked, (stored as 0xB9895440, diff -0.0000000, 0.0000000%)
-0.9 printed after unpacked (4 bytes)
-0.9000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-9.0000000 original
-9.0000000 packed and unpacked, (stored as 0xB1895440, diff -0.0000000, 0.0000000%)
-9 printed after unpacked (2 bytes)
-9.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-90.0000000 original
-90.0000000 packed and unpacked, (stored as 0xA9895440, diff -0.0000000, 0.0000000%)
-90 printed after unpacked (3 bytes)
-90.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-900.0000000 original
-900.0000000 packed and unpacked, (stored as 0xA1895440, diff -0.0000000, 0.0000000%)
-900 printed after unpacked (4 bytes)
-900.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-9000.0000000 original
-9000.0000000 packed and unpacked, (stored as 0x99895440, diff -0.0000000, 0.0000000%)
-9000 printed after unpacked (5 bytes)
-9000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-90000.0000000 original
-90000.0000000 packed and unpacked, (stored as 0x91895440, diff -0.0000000, 0.0000000%)
-90000 printed after unpacked (6 bytes)
-90000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-900000.0000000 original
-900000.0000000 packed and unpacked, (stored as 0x89895440, diff -0.0000000, 0.0000000%)
-900000 printed after unpacked (7 bytes)
-900000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-9000000.0000000 original
-9000000.0000000 packed and unpacked, (stored as 0x81895440, diff -0.0000000, 0.0000000%)
-9000000 printed after unpacked (8 bytes)
-9000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-90000000.0000000 original
-90000000.0000000 packed and unpacked, (stored as 0xC9895440, diff -0.0000000, 0.0000000%)
-90000000 printed after unpacked (9 bytes)
-90000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-900000000.0000000 original
-900000000.0000000 packed and unpacked, (stored as 0xD1895440, diff -0.0000000, 0.0000000%)
-900000000 printed after unpacked (10 bytes)
-900000000.0000000 re-parsed from printed (diff 0.0000000, 0.0000000%)

-8999999999.9999996 original
-9000000000.0000000 packed and unpacked, (stored as 0xD9895440, diff -0.0000004, 0.0000000%)
-9000000000 printed after unpacked (11 bytes)
-9000000000.0000000 re-parsed from printed (diff 0.0000004, 0.0000000%)

-89999999999.9999959 original
-90000000000.0000000 packed and unpacked, (stored as 0xE1895440, diff -0.0000041, 0.0000000%)
-90000000000 printed after unpacked (12 bytes)
-90000000000.0000000 re-parsed from printed (diff 0.0000041, 0.0000000%)

-899999999999.9999593 original
-900000000000.0000000 packed and unpacked, (stored as 0xE9895440, diff -0.0000407, 0.0000000%)
-900000000000 printed after unpacked (13 bytes)
-900000000000.0000000 re-parsed from printed (diff 0.0000407, 0.0000000%)

-8999999999999.9995927 original
-9000000000000.0000000 packed and unpacked, (stored as 0xF1895440, diff -0.0004073, 0.0000000%)
-9000000000000 printed after unpacked (14 bytes)
-9000000000000.0000000 re-parsed from printed (diff 0.0004073, 0.0000000%)

-89999999999999.9959273 original
-90000000000000.0000000 packed and unpacked, (stored as 0xF9895440, diff -0.0040727, 0.0000000%)
-90000000000000 printed after unpacked (15 bytes)
-90000000000000.0000000 re-parsed from printed (diff 0.0040727, 0.0000000%)

0.0000010 original
0.0000010 packed and unpacked, (stored as 0x3900000A, diff 0.0000000, 0.0000000%)
0.000001 printed after unpacked (8 bytes)
0.0000010 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000100 original
0.0000100 packed and unpacked, (stored as 0x39000064, diff 0.0000000, 0.0000000%)
0.00001 printed after unpacked (7 bytes)
0.0000100 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0001000 original
0.0001000 packed and unpacked, (stored as 0x390003E8, diff 0.0000000, 0.0000000%)
0.0001 printed after unpacked (6 bytes)
0.0001000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0010000 original
0.0010000 packed and unpacked, (stored as 0x39002710, diff 0.0000000, 0.0000000%)
0.001 printed after unpacked (5 bytes)
0.0010000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0100000 original
0.0100000 packed and unpacked, (stored as 0x390186A0, diff 0.0000000, 0.0000000%)
0.01 printed after unpacked (4 bytes)
0.0100000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.1000000 original
0.1000000 packed and unpacked, (stored as 0x390F4240, diff 0.0000000, 0.0000000%)
0.1 printed after unpacked (3 bytes)
0.1000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

1.0000000 original
1.0000000 packed and unpacked, (stored as 0x39989680, diff 0.0000000, 0.0000000%)
1 printed after unpacked (1 bytes)
1.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

10.0000000 original
10.0000000 packed and unpacked, (stored as 0x31989680, diff 0.0000000, 0.0000000%)
10 printed after unpacked (2 bytes)
10.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

100.0000000 original
100.0000000 packed and unpacked, (stored as 0x29989680, diff 0.0000000, 0.0000000%)
100 printed after unpacked (3 bytes)
100.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

1000.0000000 original
1000.0000000 packed and unpacked, (stored as 0x21989680, diff 0.0000000, 0.0000000%)
1000 printed after unpacked (4 bytes)
1000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

10000.0000000 original
10000.0000000 packed and unpacked, (stored as 0x19989680, diff 0.0000000, 0.0000000%)
10000 printed after unpacked (5 bytes)
10000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

100000.0000000 original
100000.0000000 packed and unpacked, (stored as 0x11989680, diff 0.0000000, 0.0000000%)
100000 printed after unpacked (6 bytes)
100000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

1000000.0000000 original
1000000.0000000 packed and unpacked, (stored as 0x09989680, diff 0.0000000, 0.0000000%)
1000000 printed after unpacked (7 bytes)
1000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

10000000.0000000 original
10000000.0000000 packed and unpacked, (stored as 0x01989680, diff 0.0000000, 0.0000000%)
10000000 printed after unpacked (8 bytes)
10000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

100000000.0000000 original
100000000.0000000 packed and unpacked, (stored as 0x49989680, diff 0.0000000, 0.0000000%)
100000000 printed after unpacked (9 bytes)
100000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

1000000000.0000000 original
1000000000.0000000 packed and unpacked, (stored as 0x51989680, diff 0.0000000, 0.0000000%)
1000000000 printed after unpacked (10 bytes)
1000000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

9999999999.9999995 original
10000000000.0000000 packed and unpacked, (stored as 0x59989680, diff 0.0000005, 0.0000000%)
10000000000 printed after unpacked (11 bytes)
10000000000.0000000 re-parsed from printed (diff -0.0000005, 0.0000000%)

99999999999.9999955 original
100000000000.0000000 packed and unpacked, (stored as 0x61989680, diff 0.0000045, 0.0000000%)
100000000000 printed after unpacked (12 bytes)
100000000000.0000000 re-parsed from printed (diff -0.0000045, 0.0000000%)

999999999999.9999547 original
1000000000000.0000000 packed and unpacked, (stored as 0x69989680, diff 0.0000453, 0.0000000%)
1000000000000 printed after unpacked (13 bytes)
1000000000000.0000000 re-parsed from printed (diff -0.0000453, 0.0000000%)

9999999999999.9995475 original
10000000000000.0000000 packed and unpacked, (stored as 0x71989680, diff 0.0004525, 0.0000000%)
10000000000000 printed after unpacked (14 bytes)
10000000000000.0000000 re-parsed from printed (diff -0.0004525, 0.0000000%)

0.0000002 original
0.0000002 packed and unpacked, (stored as 0x39000002, diff 0.0000000, 0.0000000%)
0.0000002 printed after unpacked (9 bytes)
0.0000002 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000020 original
0.0000020 packed and unpacked, (stored as 0x39000014, diff 0.0000000, 0.0000000%)
0.000002 printed after unpacked (8 bytes)
0.0000020 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000200 original
0.0000200 packed and unpacked, (stored as 0x390000C8, diff 0.0000000, 0.0000000%)
0.00002 printed after unpacked (7 bytes)
0.0000200 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0002000 original
0.0002000 packed and unpacked, (stored as 0x390007D0, diff 0.0000000, 0.0000000%)
0.0002 printed after unpacked (6 bytes)
0.0002000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0020000 original
0.0020000 packed and unpacked, (stored as 0x39004E20, diff 0.0000000, 0.0000000%)
0.002 printed after unpacked (5 bytes)
0.0020000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0200000 original
0.0200000 packed and unpacked, (stored as 0x39030D40, diff 0.0000000, 0.0000000%)
0.02 printed after unpacked (4 bytes)
0.0200000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.2000000 original
0.2000000 packed and unpacked, (stored as 0x391E8480, diff 0.0000000, 0.0000000%)
0.2 printed after unpacked (3 bytes)
0.2000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

2.0000000 original
2.0000000 packed and unpacked, (stored as 0x311E8480, diff 0.0000000, 0.0000000%)
2 printed after unpacked (1 bytes)
2.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

20.0000000 original
20.0000000 packed and unpacked, (stored as 0x291E8480, diff 0.0000000, 0.0000000%)
20 printed after unpacked (2 bytes)
20.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

200.0000000 original
200.0000000 packed and unpacked, (stored as 0x211E8480, diff 0.0000000, 0.0000000%)
200 printed after unpacked (3 bytes)
200.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

2000.0000000 original
2000.0000000 packed and unpacked, (stored as 0x191E8480, diff 0.0000000, 0.0000000%)
2000 printed after unpacked (4 bytes)
2000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

20000.0000000 original
20000.0000000 packed and unpacked, (stored as 0x111E8480, diff 0.0000000, 0.0000000%)
20000 printed after unpacked (5 bytes)
20000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

200000.0000000 original
200000.0000000 packed and unpacked, (stored as 0x091E8480, diff 0.0000000, 0.0000000%)
200000 printed after unpacked (6 bytes)
200000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

2000000.0000000 original
2000000.0000000 packed and unpacked, (stored as 0x011E8480, diff 0.0000000, 0.0000000%)
2000000 printed after unpacked (7 bytes)
2000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

20000000.0000000 original
20000000.0000000 packed and unpacked, (stored as 0x491E8480, diff 0.0000000, 0.0000000%)
20000000 printed after unpacked (8 bytes)
20000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

200000000.0000000 original
200000000.0000000 packed and unpacked, (stored as 0x511E8480, diff 0.0000000, 0.0000000%)
200000000 printed after unpacked (9 bytes)
200000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

1999999999.9999999 original
2000000000.0000000 packed and unpacked, (stored as 0x591E8480, diff 0.0000001, 0.0000000%)
2000000000 printed after unpacked (10 bytes)
2000000000.0000000 re-parsed from printed (diff -0.0000001, 0.0000000%)

19999999999.9999991 original
20000000000.0000000 packed and unpacked, (stored as 0x611E8480, diff 0.0000009, 0.0000000%)
20000000000 printed after unpacked (11 bytes)
20000000000.0000000 re-parsed from printed (diff -0.0000009, 0.0000000%)

199999999999.9999909 original
200000000000.0000000 packed and unpacked, (stored as 0x691E8480, diff 0.0000091, 0.0000000%)
200000000000 printed after unpacked (12 bytes)
200000000000.0000000 re-parsed from printed (diff -0.0000091, 0.0000000%)

1999999999999.9999095 original
2000000000000.0000000 packed and unpacked, (stored as 0x711E8480, diff 0.0000905, 0.0000000%)
2000000000000 printed after unpacked (13 bytes)
2000000000000.0000000 re-parsed from printed (diff -0.0000905, 0.0000000%)

19999999999999.9990950 original
20000000000000.0000000 packed and unpacked, (stored as 0x791E8480, diff 0.0009050, 0.0000000%)
20000000000000 printed after unpacked (14 bytes)
20000000000000.0000000 re-parsed from printed (diff -0.0009050, 0.0000000%)

0.0000003 original
0.0000003 packed and unpacked, (stored as 0x39000003, diff 0.0000000, 0.0000000%)
0.0000003 printed after unpacked (9 bytes)
0.0000003 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000030 original
0.0000030 packed and unpacked, (stored as 0x3900001E, diff 0.0000000, 0.0000000%)
0.000003 printed after unpacked (8 bytes)
0.0000030 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000300 original
0.0000300 packed and unpacked, (stored as 0x3900012C, diff 0.0000000, 0.0000000%)
0.00003 printed after unpacked (7 bytes)
0.0000300 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0003000 original
0.0003000 packed and unpacked, (stored as 0x39000BB8, diff 0.0000000, 0.0000000%)
0.0003 printed after unpacked (6 bytes)
0.0003000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0030000 original
0.0030000 packed and unpacked, (stored as 0x39007530, diff 0.0000000, 0.0000000%)
0.003 printed after unpacked (5 bytes)
0.0030000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0300000 original
0.0300000 packed and unpacked, (stored as 0x390493E0, diff 0.0000000, 0.0000000%)
0.03 printed after unpacked (4 bytes)
0.0300000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.3000000 original
0.3000000 packed and unpacked, (stored as 0x392DC6C0, diff 0.0000000, 0.0000000%)
0.3 printed after unpacked (3 bytes)
0.3000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

3.0000000 original
3.0000000 packed and unpacked, (stored as 0x312DC6C0, diff 0.0000000, 0.0000000%)
3 printed after unpacked (1 bytes)
3.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

30.0000000 original
30.0000000 packed and unpacked, (stored as 0x292DC6C0, diff 0.0000000, 0.0000000%)
30 printed after unpacked (2 bytes)
30.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

300.0000000 original
300.0000000 packed and unpacked, (stored as 0x212DC6C0, diff 0.0000000, 0.0000000%)
300 printed after unpacked (3 bytes)
300.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

3000.0000000 original
3000.0000000 packed and unpacked, (stored as 0x192DC6C0, diff 0.0000000, 0.0000000%)
3000 printed after unpacked (4 bytes)
3000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

30000.0000000 original
30000.0000000 packed and unpacked, (stored as 0x112DC6C0, diff 0.0000000, 0.0000000%)
30000 printed after unpacked (5 bytes)
30000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

300000.0000000 original
300000.0000000 packed and unpacked, (stored as 0x092DC6C0, diff 0.0000000, 0.0000000%)
300000 printed after unpacked (6 bytes)
300000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

3000000.0000000 original
3000000.0000000 packed and unpacked, (stored as 0x012DC6C0, diff 0.0000000, 0.0000000%)
3000000 printed after unpacked (7 bytes)
3000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

30000000.0000000 original
30000000.0000000 packed and unpacked, (stored as 0x492DC6C0, diff 0.0000000, 0.0000000%)
30000000 printed after unpacked (8 bytes)
30000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

300000000.0000000 original
300000000.0000000 packed and unpacked, (stored as 0x512DC6C0, diff 0.0000000, 0.0000000%)
300000000 printed after unpacked (9 bytes)
300000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

2999999999.9999999 original
3000000000.0000000 packed and unpacked, (stored as 0x592DC6C0, diff 0.0000001, 0.0000000%)
3000000000 printed after unpacked (10 bytes)
3000000000.0000000 re-parsed from printed (diff -0.0000001, 0.0000000%)

29999999999.9999986 original
30000000000.0000000 packed and unpacked, (stored as 0x612DC6C0, diff 0.0000014, 0.0000000%)
30000000000 printed after unpacked (11 bytes)
30000000000.0000000 re-parsed from printed (diff -0.0000014, 0.0000000%)

299999999999.9999864 original
300000000000.0000000 packed and unpacked, (stored as 0x692DC6C0, diff 0.0000136, 0.0000000%)
300000000000 printed after unpacked (12 bytes)
300000000000.0000000 re-parsed from printed (diff -0.0000136, 0.0000000%)

2999999999999.9998642 original
3000000000000.0000000 packed and unpacked, (stored as 0x712DC6C0, diff 0.0001358, 0.0000000%)
3000000000000 printed after unpacked (13 bytes)
3000000000000.0000000 re-parsed from printed (diff -0.0001358, 0.0000000%)

29999999999999.9986424 original
30000000000000.0000000 packed and unpacked, (stored as 0x792DC6C0, diff 0.0013576, 0.0000000%)
30000000000000 printed after unpacked (14 bytes)
30000000000000.0000000 re-parsed from printed (diff -0.0013576, 0.0000000%)

0.0000004 original
0.0000004 packed and unpacked, (stored as 0x39000004, diff 0.0000000, 0.0000000%)
0.0000004 printed after unpacked (9 bytes)
0.0000004 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000040 original
0.0000040 packed and unpacked, (stored as 0x39000028, diff 0.0000000, 0.0000000%)
0.000004 printed after unpacked (8 bytes)
0.0000040 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000400 original
0.0000400 packed and unpacked, (stored as 0x39000190, diff 0.0000000, 0.0000000%)
0.00004 printed after unpacked (7 bytes)
0.0000400 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0004000 original
0.0004000 packed and unpacked, (stored as 0x39000FA0, diff 0.0000000, 0.0000000%)
0.0004 printed after unpacked (6 bytes)
0.0004000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0040000 original
0.0040000 packed and unpacked, (stored as 0x39009C40, diff 0.0000000, 0.0000000%)
0.004 printed after unpacked (5 bytes)
0.0040000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0400000 original
0.0400000 packed and unpacked, (stored as 0x39061A80, diff 0.0000000, 0.0000000%)
0.04 printed after unpacked (4 bytes)
0.0400000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.4000000 original
0.4000000 packed and unpacked, (stored as 0x393D0900, diff 0.0000000, 0.0000000%)
0.4 printed after unpacked (3 bytes)
0.4000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

4.0000000 original
4.0000000 packed and unpacked, (stored as 0x313D0900, diff 0.0000000, 0.0000000%)
4 printed after unpacked (1 bytes)
4.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

40.0000000 original
40.0000000 packed and unpacked, (stored as 0x293D0900, diff 0.0000000, 0.0000000%)
40 printed after unpacked (2 bytes)
40.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

400.0000000 original
400.0000000 packed and unpacked, (stored as 0x213D0900, diff 0.0000000, 0.0000000%)
400 printed after unpacked (3 bytes)
400.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

4000.0000000 original
4000.0000000 packed and unpacked, (stored as 0x193D0900, diff 0.0000000, 0.0000000%)
4000 printed after unpacked (4 bytes)
4000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

40000.0000000 original
40000.0000000 packed and unpacked, (stored as 0x113D0900, diff 0.0000000, 0.0000000%)
40000 printed after unpacked (5 bytes)
40000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

400000.0000000 original
400000.0000000 packed and unpacked, (stored as 0x093D0900, diff 0.0000000, 0.0000000%)
400000 printed after unpacked (6 bytes)
400000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

4000000.0000000 original
4000000.0000000 packed and unpacked, (stored as 0x013D0900, diff 0.0000000, 0.0000000%)
4000000 printed after unpacked (7 bytes)
4000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

40000000.0000000 original
40000000.0000000 packed and unpacked, (stored as 0x493D0900, diff 0.0000000, 0.0000000%)
40000000 printed after unpacked (8 bytes)
40000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

400000000.0000000 original
400000000.0000000 packed and unpacked, (stored as 0x513D0900, diff 0.0000000, 0.0000000%)
400000000 printed after unpacked (9 bytes)
400000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

3999999999.9999998 original
4000000000.0000000 packed and unpacked, (stored as 0x593D0900, diff 0.0000002, 0.0000000%)
4000000000 printed after unpacked (10 bytes)
4000000000.0000000 re-parsed from printed (diff -0.0000002, 0.0000000%)

39999999999.9999982 original
40000000000.0000000 packed and unpacked, (stored as 0x613D0900, diff 0.0000018, 0.0000000%)
40000000000 printed after unpacked (11 bytes)
40000000000.0000000 re-parsed from printed (diff -0.0000018, 0.0000000%)

399999999999.9999819 original
400000000000.0000000 packed and unpacked, (stored as 0x693D0900, diff 0.0000181, 0.0000000%)
400000000000 printed after unpacked (12 bytes)
400000000000.0000000 re-parsed from printed (diff -0.0000181, 0.0000000%)

3999999999999.9998190 original
4000000000000.0000000 packed and unpacked, (stored as 0x713D0900, diff 0.0001810, 0.0000000%)
4000000000000 printed after unpacked (13 bytes)
4000000000000.0000000 re-parsed from printed (diff -0.0001810, 0.0000000%)

39999999999999.9981899 original
40000000000000.0000000 packed and unpacked, (stored as 0x793D0900, diff 0.0018101, 0.0000000%)
40000000000000 printed after unpacked (14 bytes)
40000000000000.0000000 re-parsed from printed (diff -0.0018101, 0.0000000%)

0.0000005 original
0.0000005 packed and unpacked, (stored as 0x39000005, diff 0.0000000, 0.0000000%)
0.0000005 printed after unpacked (9 bytes)
0.0000005 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000050 original
0.0000050 packed and unpacked, (stored as 0x39000032, diff 0.0000000, 0.0000000%)
0.000005 printed after unpacked (8 bytes)
0.0000050 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000500 original
0.0000500 packed and unpacked, (stored as 0x390001F4, diff 0.0000000, 0.0000000%)
0.00005 printed after unpacked (7 bytes)
0.0000500 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0005000 original
0.0005000 packed and unpacked, (stored as 0x39001388, diff 0.0000000, 0.0000000%)
0.0005 printed after unpacked (6 bytes)
0.0005000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0050000 original
0.0050000 packed and unpacked, (stored as 0x3900C350, diff 0.0000000, 0.0000000%)
0.005 printed after unpacked (5 bytes)
0.0050000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0500000 original
0.0500000 packed and unpacked, (stored as 0x3907A120, diff 0.0000000, 0.0000000%)
0.05 printed after unpacked (4 bytes)
0.0500000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.5000000 original
0.5000000 packed and unpacked, (stored as 0x394C4B40, diff 0.0000000, 0.0000000%)
0.5 printed after unpacked (3 bytes)
0.5000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

5.0000000 original
5.0000000 packed and unpacked, (stored as 0x314C4B40, diff 0.0000000, 0.0000000%)
5 printed after unpacked (1 bytes)
5.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

50.0000000 original
50.0000000 packed and unpacked, (stored as 0x294C4B40, diff 0.0000000, 0.0000000%)
50 printed after unpacked (2 bytes)
50.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

500.0000000 original
500.0000000 packed and unpacked, (stored as 0x214C4B40, diff 0.0000000, 0.0000000%)
500 printed after unpacked (3 bytes)
500.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

5000.0000000 original
5000.0000000 packed and unpacked, (stored as 0x194C4B40, diff 0.0000000, 0.0000000%)
5000 printed after unpacked (4 bytes)
5000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

50000.0000000 original
50000.0000000 packed and unpacked, (stored as 0x114C4B40, diff 0.0000000, 0.0000000%)
50000 printed after unpacked (5 bytes)
50000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

500000.0000000 original
500000.0000000 packed and unpacked, (stored as 0x094C4B40, diff 0.0000000, 0.0000000%)
500000 printed after unpacked (6 bytes)
500000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

5000000.0000000 original
5000000.0000000 packed and unpacked, (stored as 0x014C4B40, diff 0.0000000, 0.0000000%)
5000000 printed after unpacked (7 bytes)
5000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

50000000.0000000 original
50000000.0000000 packed and unpacked, (stored as 0x494C4B40, diff 0.0000000, 0.0000000%)
50000000 printed after unpacked (8 bytes)
50000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

500000000.0000000 original
500000000.0000000 packed and unpacked, (stored as 0x514C4B40, diff 0.0000000, 0.0000000%)
500000000 printed after unpacked (9 bytes)
500000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

4999999999.9999998 original
5000000000.0000000 packed and unpacked, (stored as 0x594C4B40, diff 0.0000002, 0.0000000%)
5000000000 printed after unpacked (10 bytes)
5000000000.0000000 re-parsed from printed (diff -0.0000002, 0.0000000%)

49999999999.9999977 original
50000000000.0000000 packed and unpacked, (stored as 0x614C4B40, diff 0.0000023, 0.0000000%)
50000000000 printed after unpacked (11 bytes)
50000000000.0000000 re-parsed from printed (diff -0.0000023, 0.0000000%)

499999999999.9999774 original
500000000000.0000000 packed and unpacked, (stored as 0x694C4B40, diff 0.0000226, 0.0000000%)
500000000000 printed after unpacked (12 bytes)
500000000000.0000000 re-parsed from printed (diff -0.0000226, 0.0000000%)

4999999999999.9997737 original
5000000000000.0000000 packed and unpacked, (stored as 0x714C4B40, diff 0.0002263, 0.0000000%)
5000000000000 printed after unpacked (13 bytes)
5000000000000.0000000 re-parsed from printed (diff -0.0002263, 0.0000000%)

49999999999999.9977374 original
50000000000000.0000000 packed and unpacked, (stored as 0x794C4B40, diff 0.0022626, 0.0000000%)
50000000000000 printed after unpacked (14 bytes)
50000000000000.0000000 re-parsed from printed (diff -0.0022626, 0.0000000%)

0.0000006 original
0.0000006 packed and unpacked, (stored as 0x39000006, diff 0.0000000, 0.0000000%)
0.0000006 printed after unpacked (9 bytes)
0.0000006 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000060 original
0.0000060 packed and unpacked, (stored as 0x3900003C, diff 0.0000000, 0.0000000%)
0.000006 printed after unpacked (8 bytes)
0.0000060 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000600 original
0.0000600 packed and unpacked, (stored as 0x39000258, diff 0.0000000, 0.0000000%)
0.00006 printed after unpacked (7 bytes)
0.0000600 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0006000 original
0.0006000 packed and unpacked, (stored as 0x39001770, diff 0.0000000, 0.0000000%)
0.0006 printed after unpacked (6 bytes)
0.0006000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0060000 original
0.0060000 packed and unpacked, (stored as 0x3900EA60, diff 0.0000000, 0.0000000%)
0.006 printed after unpacked (5 bytes)
0.0060000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0600000 original
0.0600000 packed and unpacked, (stored as 0x390927C0, diff 0.0000000, 0.0000000%)
0.06 printed after unpacked (4 bytes)
0.0600000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.6000000 original
0.6000000 packed and unpacked, (stored as 0x395B8D80, diff 0.0000000, 0.0000000%)
0.6 printed after unpacked (3 bytes)
0.6000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

6.0000000 original
6.0000000 packed and unpacked, (stored as 0x315B8D80, diff 0.0000000, 0.0000000%)
6 printed after unpacked (1 bytes)
6.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

60.0000000 original
60.0000000 packed and unpacked, (stored as 0x295B8D80, diff 0.0000000, 0.0000000%)
60 printed after unpacked (2 bytes)
60.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

600.0000000 original
600.0000000 packed and unpacked, (stored as 0x215B8D80, diff 0.0000000, 0.0000000%)
600 printed after unpacked (3 bytes)
600.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

6000.0000000 original
6000.0000000 packed and unpacked, (stored as 0x195B8D80, diff 0.0000000, 0.0000000%)
6000 printed after unpacked (4 bytes)
6000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

60000.0000000 original
60000.0000000 packed and unpacked, (stored as 0x115B8D80, diff 0.0000000, 0.0000000%)
60000 printed after unpacked (5 bytes)
60000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

600000.0000000 original
600000.0000000 packed and unpacked, (stored as 0x095B8D80, diff 0.0000000, 0.0000000%)
600000 printed after unpacked (6 bytes)
600000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

6000000.0000000 original
6000000.0000000 packed and unpacked, (stored as 0x015B8D80, diff 0.0000000, 0.0000000%)
6000000 printed after unpacked (7 bytes)
6000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

60000000.0000000 original
60000000.0000000 packed and unpacked, (stored as 0x495B8D80, diff 0.0000000, 0.0000000%)
60000000 printed after unpacked (8 bytes)
60000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

600000000.0000000 original
600000000.0000000 packed and unpacked, (stored as 0x515B8D80, diff 0.0000000, 0.0000000%)
600000000 printed after unpacked (9 bytes)
600000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

5999999999.9999997 original
6000000000.0000000 packed and unpacked, (stored as 0x595B8D80, diff 0.0000003, 0.0000000%)
6000000000 printed after unpacked (10 bytes)
6000000000.0000000 re-parsed from printed (diff -0.0000003, 0.0000000%)

59999999999.9999973 original
60000000000.0000000 packed and unpacked, (stored as 0x615B8D80, diff 0.0000027, 0.0000000%)
60000000000 printed after unpacked (11 bytes)
60000000000.0000000 re-parsed from printed (diff -0.0000027, 0.0000000%)

599999999999.9999728 original
600000000000.0000000 packed and unpacked, (stored as 0x695B8D80, diff 0.0000272, 0.0000000%)
600000000000 printed after unpacked (12 bytes)
600000000000.0000000 re-parsed from printed (diff -0.0000272, 0.0000000%)

5999999999999.9997285 original
6000000000000.0000000 packed and unpacked, (stored as 0x715B8D80, diff 0.0002715, 0.0000000%)
6000000000000 printed after unpacked (13 bytes)
6000000000000.0000000 re-parsed from printed (diff -0.0002715, 0.0000000%)

59999999999999.9972849 original
60000000000000.0000000 packed and unpacked, (stored as 0x795B8D80, diff 0.0027151, 0.0000000%)
60000000000000 printed after unpacked (14 bytes)
60000000000000.0000000 re-parsed from printed (diff -0.0027151, 0.0000000%)

0.0000007 original
0.0000007 packed and unpacked, (stored as 0x39000007, diff 0.0000000, 0.0000000%)
0.0000007 printed after unpacked (9 bytes)
0.0000007 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000070 original
0.0000070 packed and unpacked, (stored as 0x39000046, diff 0.0000000, 0.0000000%)
0.000007 printed after unpacked (8 bytes)
0.0000070 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000700 original
0.0000700 packed and unpacked, (stored as 0x390002BC, diff 0.0000000, 0.0000000%)
0.00007 printed after unpacked (7 bytes)
0.0000700 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0007000 original
0.0007000 packed and unpacked, (stored as 0x39001B58, diff 0.0000000, 0.0000000%)
0.0007 printed after unpacked (6 bytes)
0.0007000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0070000 original
0.0070000 packed and unpacked, (stored as 0x39011170, diff 0.0000000, 0.0000000%)
0.007 printed after unpacked (5 bytes)
0.0070000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0700000 original
0.0700000 packed and unpacked, (stored as 0x390AAE60, diff 0.0000000, 0.0000000%)
0.07 printed after unpacked (4 bytes)
0.0700000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.7000000 original
0.7000000 packed and unpacked, (stored as 0x396ACFC0, diff 0.0000000, 0.0000000%)
0.7 printed after unpacked (3 bytes)
0.7000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

7.0000000 original
7.0000000 packed and unpacked, (stored as 0x316ACFC0, diff 0.0000000, 0.0000000%)
7 printed after unpacked (1 bytes)
7.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

70.0000000 original
70.0000000 packed and unpacked, (stored as 0x296ACFC0, diff 0.0000000, 0.0000000%)
70 printed after unpacked (2 bytes)
70.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

700.0000000 original
700.0000000 packed and unpacked, (stored as 0x216ACFC0, diff 0.0000000, 0.0000000%)
700 printed after unpacked (3 bytes)
700.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

7000.0000000 original
7000.0000000 packed and unpacked, (stored as 0x196ACFC0, diff 0.0000000, 0.0000000%)
7000 printed after unpacked (4 bytes)
7000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

70000.0000000 original
70000.0000000 packed and unpacked, (stored as 0x116ACFC0, diff 0.0000000, 0.0000000%)
70000 printed after unpacked (5 bytes)
70000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

700000.0000000 original
700000.0000000 packed and unpacked, (stored as 0x096ACFC0, diff 0.0000000, 0.0000000%)
700000 printed after unpacked (6 bytes)
700000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

7000000.0000000 original
7000000.0000000 packed and unpacked, (stored as 0x016ACFC0, diff 0.0000000, 0.0000000%)
7000000 printed after unpacked (7 bytes)
7000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

70000000.0000000 original
70000000.0000000 packed and unpacked, (stored as 0x496ACFC0, diff 0.0000000, 0.0000000%)
70000000 printed after unpacked (8 bytes)
70000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

700000000.0000000 original
700000000.0000000 packed and unpacked, (stored as 0x516ACFC0, diff 0.0000000, 0.0000000%)
700000000 printed after unpacked (9 bytes)
700000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

6999999999.9999997 original
7000000000.0000000 packed and unpacked, (stored as 0x596ACFC0, diff 0.0000003, 0.0000000%)
7000000000 printed after unpacked (10 bytes)
7000000000.0000000 re-parsed from printed (diff -0.0000003, 0.0000000%)

69999999999.9999968 original
70000000000.0000000 packed and unpacked, (stored as 0x616ACFC0, diff 0.0000032, 0.0000000%)
70000000000 printed after unpacked (11 bytes)
70000000000.0000000 re-parsed from printed (diff -0.0000032, 0.0000000%)

699999999999.9999683 original
700000000000.0000000 packed and unpacked, (stored as 0x696ACFC0, diff 0.0000317, 0.0000000%)
700000000000 printed after unpacked (12 bytes)
700000000000.0000000 re-parsed from printed (diff -0.0000317, 0.0000000%)

6999999999999.9996832 original
7000000000000.0000000 packed and unpacked, (stored as 0x716ACFC0, diff 0.0003168, 0.0000000%)
7000000000000 printed after unpacked (13 bytes)
7000000000000.0000000 re-parsed from printed (diff -0.0003168, 0.0000000%)

69999999999999.9968324 original
70000000000000.0000000 packed and unpacked, (stored as 0x796ACFC0, diff 0.0031676, 0.0000000%)
70000000000000 printed after unpacked (14 bytes)
70000000000000.0000000 re-parsed from printed (diff -0.0031676, 0.0000000%)

0.0000008 original
0.0000008 packed and unpacked, (stored as 0x39000008, diff 0.0000000, 0.0000000%)
0.0000008 printed after unpacked (9 bytes)
0.0000008 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000080 original
0.0000080 packed and unpacked, (stored as 0x39000050, diff 0.0000000, 0.0000000%)
0.000008 printed after unpacked (8 bytes)
0.0000080 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000800 original
0.0000800 packed and unpacked, (stored as 0x39000320, diff 0.0000000, 0.0000000%)
0.00008 printed after unpacked (7 bytes)
0.0000800 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0008000 original
0.0008000 packed and unpacked, (stored as 0x39001F40, diff 0.0000000, 0.0000000%)
0.0008 printed after unpacked (6 bytes)
0.0008000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0080000 original
0.0080000 packed and unpacked, (stored as 0x39013880, diff 0.0000000, 0.0000000%)
0.008 printed after unpacked (5 bytes)
0.0080000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0800000 original
0.0800000 packed and unpacked, (stored as 0x390C3500, diff 0.0000000, 0.0000000%)
0.08 printed after unpacked (4 bytes)
0.0800000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.8000000 original
0.8000000 packed and unpacked, (stored as 0x397A1200, diff 0.0000000, 0.0000000%)
0.8 printed after unpacked (3 bytes)
0.8000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

8.0000000 original
8.0000000 packed and unpacked, (stored as 0x317A1200, diff 0.0000000, 0.0000000%)
8 printed after unpacked (1 bytes)
8.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

80.0000000 original
80.0000000 packed and unpacked, (stored as 0x297A1200, diff 0.0000000, 0.0000000%)
80 printed after unpacked (2 bytes)
80.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

800.0000000 original
800.0000000 packed and unpacked, (stored as 0x217A1200, diff 0.0000000, 0.0000000%)
800 printed after unpacked (3 bytes)
800.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

8000.0000000 original
8000.0000000 packed and unpacked, (stored as 0x197A1200, diff 0.0000000, 0.0000000%)
8000 printed after unpacked (4 bytes)
8000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

80000.0000000 original
80000.0000000 packed and unpacked, (stored as 0x117A1200, diff 0.0000000, 0.0000000%)
80000 printed after unpacked (5 bytes)
80000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

800000.0000000 original
800000.0000000 packed and unpacked, (stored as 0x097A1200, diff 0.0000000, 0.0000000%)
800000 printed after unpacked (6 bytes)
800000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

8000000.0000000 original
8000000.0000000 packed and unpacked, (stored as 0x017A1200, diff 0.0000000, 0.0000000%)
8000000 printed after unpacked (7 bytes)
8000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

80000000.0000000 original
80000000.0000000 packed and unpacked, (stored as 0x497A1200, diff 0.0000000, 0.0000000%)
80000000 printed after unpacked (8 bytes)
80000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

800000000.0000000 original
800000000.0000000 packed and unpacked, (stored as 0x517A1200, diff 0.0000000, 0.0000000%)
800000000 printed after unpacked (9 bytes)
800000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

7999999999.9999996 original
8000000000.0000000 packed and unpacked, (stored as 0x597A1200, diff 0.0000004, 0.0000000%)
8000000000 printed after unpacked (10 bytes)
8000000000.0000000 re-parsed from printed (diff -0.0000004, 0.0000000%)

79999999999.9999964 original
80000000000.0000000 packed and unpacked, (stored as 0x617A1200, diff 0.0000036, 0.0000000%)
80000000000 printed after unpacked (11 bytes)
80000000000.0000000 re-parsed from printed (diff -0.0000036, 0.0000000%)

799999999999.9999638 original
800000000000.0000000 packed and unpacked, (stored as 0x697A1200, diff 0.0000362, 0.0000000%)
800000000000 printed after unpacked (12 bytes)
800000000000.0000000 re-parsed from printed (diff -0.0000362, 0.0000000%)

7999999999999.9996380 original
8000000000000.0000000 packed and unpacked, (stored as 0x717A1200, diff 0.0003620, 0.0000000%)
8000000000000 printed after unpacked (13 bytes)
8000000000000.0000000 re-parsed from printed (diff -0.0003620, 0.0000000%)

79999999999999.9963798 original
80000000000000.0000000 packed and unpacked, (stored as 0x797A1200, diff 0.0036202, 0.0000000%)
80000000000000 printed after unpacked (14 bytes)
80000000000000.0000000 re-parsed from printed (diff -0.0036202, 0.0000000%)

0.0000009 original
0.0000009 packed and unpacked, (stored as 0x39000009, diff 0.0000000, 0.0000000%)
0.0000009 printed after unpacked (9 bytes)
0.0000009 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000090 original
0.0000090 packed and unpacked, (stored as 0x3900005A, diff 0.0000000, 0.0000000%)
0.000009 printed after unpacked (8 bytes)
0.0000090 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0000900 original
0.0000900 packed and unpacked, (stored as 0x39000384, diff 0.0000000, 0.0000000%)
0.00009 printed after unpacked (7 bytes)
0.0000900 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0009000 original
0.0009000 packed and unpacked, (stored as 0x39002328, diff 0.0000000, 0.0000000%)
0.0009 printed after unpacked (6 bytes)
0.0009000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0090000 original
0.0090000 packed and unpacked, (stored as 0x39015F90, diff 0.0000000, 0.0000000%)
0.009 printed after unpacked (5 bytes)
0.0090000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.0900000 original
0.0900000 packed and unpacked, (stored as 0x390DBBA0, diff 0.0000000, 0.0000000%)
0.09 printed after unpacked (4 bytes)
0.0900000 re-parsed from printed (diff -0.0000000, 0.0000000%)

0.9000000 original
0.9000000 packed and unpacked, (stored as 0x39895440, diff 0.0000000, 0.0000000%)
0.9 printed after unpacked (3 bytes)
0.9000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

9.0000000 original
9.0000000 packed and unpacked, (stored as 0x31895440, diff 0.0000000, 0.0000000%)
9 printed after unpacked (1 bytes)
9.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

90.0000000 original
90.0000000 packed and unpacked, (stored as 0x29895440, diff 0.0000000, 0.0000000%)
90 printed after unpacked (2 bytes)
90.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

900.0000000 original
900.0000000 packed and unpacked, (stored as 0x21895440, diff 0.0000000, 0.0000000%)
900 printed after unpacked (3 bytes)
900.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

9000.0000000 original
9000.0000000 packed and unpacked, (stored as 0x19895440, diff 0.0000000, 0.0000000%)
9000 printed after unpacked (4 bytes)
9000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

90000.0000000 original
90000.0000000 packed and unpacked, (stored as 0x11895440, diff 0.0000000, 0.0000000%)
90000 printed after unpacked (5 bytes)
90000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

900000.0000000 original
900000.0000000 packed and unpacked, (stored as 0x09895440, diff 0.0000000, 0.0000000%)
900000 printed after unpacked (6 bytes)
900000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

9000000.0000000 original
9000000.0000000 packed and unpacked, (stored as 0x01895440, diff 0.0000000, 0.0000000%)
9000000 printed after unpacked (7 bytes)
9000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

90000000.0000000 original
90000000.0000000 packed and unpacked, (stored as 0x49895440, diff 0.0000000, 0.0000000%)
90000000 printed after unpacked (8 bytes)
90000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

900000000.0000000 original
900000000.0000000 packed and unpacked, (stored as 0x51895440, diff 0.0000000, 0.0000000%)
900000000 printed after unpacked (9 bytes)
900000000.0000000 re-parsed from printed (diff -0.0000000, 0.0000000%)

8999999999.9999996 original
9000000000.0000000 packed and unpacked, (stored as 0x59895440, diff 0.0000004, 0.0000000%)
9000000000 printed after unpacked (10 bytes)
9000000000.0000000 re-parsed from printed (diff -0.0000004, 0.0000000%)

89999999999.9999959 original
90000000000.0000000 packed and unpacked, (stored as 0x61895440, diff 0.0000041, 0.0000000%)
90000000000 printed after unpacked (11 bytes)
90000000000.0000000 re-parsed from printed (diff -0.0000041, 0.0000000%)

899999999999.9999593 original
900000000000.0000000 packed and unpacked, (stored as 0x69895440, diff 0.0000407, 0.0000000%)
900000000000 printed after unpacked (12 bytes)
900000000000.0000000 re-parsed from printed (diff -0.0000407, 0.0000000%)

8999999999999.9995927 original
9000000000000.0000000 packed and unpacked, (stored as 0x71895440, diff 0.0004073, 0.0000000%)
9000000000000 printed after unpacked (13 bytes)
9000000000000.0000000 re-parsed from printed (diff -0.0004073, 0.0000000%)

89999999999999.9959273 original
90000000000000.0000000 packed and unpacked, (stored as 0x79895440, diff 0.0040727, 0.0000000%)
90000000000000 printed after unpacked (14 bytes)
90000000000000.0000000 re-parsed from printed (diff -0.0040727, 0.0000000%)



Benchmarking 1000000 numbers, please wait...

SYSTEM  LONG DOUBLE    SIZE: 16 bytes
NETDATA FLOATING POINT SIZE: 4 bytes

NETDATA INTERNAL FLOATING POINT ARITHMETICS NEEDS 4.00 TIMES LESS MEMORY.

NETDATA FLOATING POINT
MIN POSITIVE VALUE 0.0000001
MAX POSITIVE VALUE 1677721500000000000000.0000000
MIN NEGATIVE VALUE -1677721500000000000000.0000000
MAX NEGATIVE VALUE -0.0000001
Maximum accuracy loss accepted: 0.0001000%


INTERNAL LONG DOUBLE PRINTING: user 16.16404, system 0.19251, total 16.35655
SYSTEM   LONG DOUBLE PRINTING: user 65.59629, system 0.24044, total 65.83672
NETDATA CODE IS  F A S T E R  302.51 %

INTERNAL LONG DOUBLE PRINTING WITH PACK / UNPACK: user 44.36237, system 0.26868, total 44.63105
EVEN WITH PACKING AND UNPACKING, NETDATA CODE IS  F A S T E R  47.51 %


ALL TESTS PASSED

+ CHECK_RESULT 0 0 0 'Failed option: -W unittest'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -W unittest'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -W createdataset=10
+ CHECK_RESULT 0 0 0 'Failed option: -W createdataset=N'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -W createdataset=N'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -W set section option value
+ CHECK_RESULT 0 0 0 'Failed option: -W set section option value'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -W set section option value'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -W simple-pattern pattern string
+ grep RESULT
RESULT: NOT MATCHED - pattern 'pattern' does not match 'string', wildcarded ''
+ CHECK_RESULT 0 0 0 'Failed option: -W simple-pattern pattern string'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -W simple-pattern pattern string'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ netdata -D
+ ./killpid.sh
+ CHECK_RESULT 0 0 0 'Failed option: -D'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Failed option: -D'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ LOG_INFO 'End to run testcase:oe_test_netdata.'
+ message='End to run testcase:oe_test_netdata.'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'End to run testcase:oe_test_netdata.'
Thu Feb  2 22:38:43 2023 - INFO  - End to run testcase:oe_test_netdata.
+ CASE_RESULT 0
+ case_re=0
+ test -z ''
+ test 0 -eq 0
+ LOG_INFO 'succeed to execute the case.'
+ message='succeed to execute the case.'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'succeed to execute the case.'
Thu Feb  2 22:38:44 2023 - INFO  - succeed to execute the case.
+ exec_result=
+ exit 0
+ post_test
+ LOG_INFO 'Start to restore the test environment.'
+ message='Start to restore the test environment.'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'Start to restore the test environment.'
Thu Feb  2 22:38:44 2023 - INFO  - Start to restore the test environment.
+ DNF_REMOVE
+ node=1
+ pkg_list=
+ mode=0
+ [[ -z /tmp/tmp9jaeojct ]]
+ '[' 0 -ne 0 ']'
+ '[' 1 == 0 ']'
+ python3 /root/mugen-riscv/libs/locallibs/rpm_manage.py remove --node 1 --pkgs '' --tempfile /tmp/tmp9jaeojct
+ '[' 0 -ne 0 ']'
+ rm test.txt
+ LOG_INFO 'End to restore the test environment.'
+ message='End to restore the test environment.'
+ python3 /root/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'End to restore the test environment.'
Thu Feb  2 22:39:07 2023 - INFO  - End to restore the test environment.
