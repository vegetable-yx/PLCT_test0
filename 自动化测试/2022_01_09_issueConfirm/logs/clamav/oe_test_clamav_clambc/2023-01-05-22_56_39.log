+ source /root/GitRepo/mugen-riscv/libs/locallibs/common_lib.sh
++ python3 --version
++ '[' 0 -eq 0 ']'
++ source /root/GitRepo/mugen-riscv/libs/locallibs/common_lib_python.sh
+ main
++ type -t post_test
+ '[' -n function ']'
+ trap post_test EXIT INT HUP TERM
+ rpm -qa
+ grep expect
++ type -t config_params
+ '[' -n '' ']'
++ type -t pre_test
+ '[' -n function ']'
+ pre_test
+ LOG_INFO 'Start to prepare the database config.'
+ message='Start to prepare the database config.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'Start to prepare the database config.'
Thu Jan  5 22:56:43 2023 - INFO  - Start to prepare the database config.
+ DNF_INSTALL clamav
+ pkgs=clamav
+ node=1
+ '[' -z '' ']'
+ tmpfile=
++ python3 /root/GitRepo/mugen-riscv/libs/locallibs/rpm_manage.py install --pkgs clamav --node 1 --tempfile ''
+ tmpfile2=/tmp/tmp61tj2oj5
+ '[' -z '' ']'
+ tmpfile=/tmp/tmp61tj2oj5
+ mkdir /opt/test_clambc
+ cd /opt/test_clambc
+ sigtool -u /var/lib/clamav/bytecode.cvd
+ LOG_INFO 'End to prepare the database config.'
+ message='End to prepare the database config.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'End to prepare the database config.'
Thu Jan  5 23:00:41 2023 - INFO  - End to prepare the database config.
++ type -t run_test
+ '[' -n function ']'
+ run_test
+ LOG_INFO 'Start to run test.'
+ message='Start to run test.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'Start to run test.'
Thu Jan  5 23:00:42 2023 - INFO  - Start to run test.
+ clambc -f 3986187.cbc
+ CHECK_RESULT 0 0 0 'Check clambc -f failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -f failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -t 3986187.cbc
+ CHECK_RESULT 0 0 0 'Check clambc -t failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -t failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -i 3986187.cbc
Bytecode format functionality level: 7
Bytecode metadata:
	compiler version: clambc-0.98.1rc2
	compiled on: (1452691691) Wed Jan 13 21:28:11 2016
	compiled by: amishhammer
	target exclude: 0
	bytecode type: logical only
	bytecode functionality level: 52 - 0
	bytecode logical signature: BC.Legacy.Exploit.CVE_2010_1885-2;Engine:52-255,Target:3;0;6863703a2f2f{25-700}736372697074{1-3}6465666572
	virusname prefix: (null)
	virusnames: 0
	bytecode triggered on: files matching logical signature
	number of functions: 1
	number of types: 41
	number of global constants: 27
	number of debug nodes: 0
	bytecode APIs used:
	 read, seek, setvirusname, debug_print_str, debug_print_uint, file_find,
	 bytecode_rt_error, debug_print_str_start, debug_print_str_nonl,
	 file_find_limit, engine_functionality_level
+ CHECK_RESULT 0 0 0 'Check clambc -i failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -i failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -p 3986187.cbc
Sourcefire, Inc. (c) 2010.  All rights reserved.

This code is the copyrighted work of Sourcefire, Inc. and is
provided to you "AS-IS".  Sourcefire makes no representations or
warranties, express or implied, including, but not limited to,
warranties of merchantability, fitness for a particular purpose,
non-infringement or title.  Sourcefire will not be liable to you for
any direct, indirect, special or consequential damages arising out of
your use of the code.
+ CHECK_RESULT 0 0 0 'Check clambc -p failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -p failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -c 3986187.cbc
found 41 extra types of 105 total, starting at tid 69
TID  KIND                INTERNAL
------------------------------------------------------------------------
 65: DPointerType        i8*
 66: DPointerType        i16*
 67: DPointerType        i32*
 68: DPointerType        i64*
 69: DArrayType          [1 x i8]
 70: DArrayType          [2 x i8]
 71: DArrayType          [3 x i8]
 72: DArrayType          [4 x i8]
 73: DArrayType          [5 x i8]
 74: DArrayType          [6 x i8]
 75: DArrayType          [7 x i8]
 76: DPointerType        [466 x i8]*
 77: DPointerType        i8**
 78: DPointerType        [7 x i8]*
 79: DPointerType        [6 x i8]*
 80: DPointerType        [17 x i8]*
 81: DPointerType        [2 x i8]*
 82: DPointerType        [79 x i8]*
 83: DPointerType        [52 x i8]*
 84: DPointerType        [20 x i8]*
 85: DPointerType        [24 x i8]*
 86: DPointerType        [64 x i32]*
 87: DPointerType        [34 x i8]*
 88: DPointerType        i32**
 89: DArrayType          [1024 x i8]
 90: DPointerType        [1024 x i8]*
 91: DFunctionType       i0 func ( )
 92: DFunctionType       i32 func ( )
 93: DFunctionType       i32 func ( i32 )
 94: DFunctionType       i32 func ( i32 i32 )
 95: DFunctionType       i32 func ( i32 i32 )
 96: DFunctionType       i32 func ( i32 i32 i32 )
 97: DArrayType          [34 x i8]
 98: DArrayType          [64 x i32]
 99: DArrayType          [24 x i8]
100: DArrayType          [20 x i8]
101: DArrayType          [52 x i8]
102: DArrayType          [79 x i8]
103: DArrayType          [17 x i8]
104: DArrayType          [466 x i8]
------------------------------------------------------------------------
########################################################################
####################### Function id   0 ################################
########################################################################
found a total of 27 globals
GID  ID    VALUE
------------------------------------------------------------------------
  0 [  0]: i0 unknown
  1 [  1]: [466 x i8] unknown
  2 [  2]: i8* unknown
  3 [  3]: [7 x i8] unknown
  4 [  4]: [7 x i8] unknown
  5 [  5]: [6 x i8] unknown
  6 [  6]: [17 x i8] unknown
  7 [  7]: [2 x i8] unknown
  8 [  8]: i16 unknown
  9 [  9]: [79 x i8] unknown
 10 [ 10]: [52 x i8] unknown
 11 [ 11]: [20 x i8] unknown
 12 [ 12]: [24 x i8] unknown
 13 [ 13]: [34 x i8] unknown
 14 [ 14]: i8* unknown
 15 [ 15]: i8* unknown
 16 [ 16]: i8* unknown
 17 [ 17]: i8* unknown
 18 [ 18]: i8* unknown
 19 [ 19]: i8* unknown
 20 [ 20]: i8* unknown
 21 [ 21]: i8* unknown
 22 [ 22]: i8* unknown
 23 [ 23]: i8* unknown
 24 [ 24]: i32* unknown
 25 [ 25]: i8* unknown
 26 [ 26]: i8* unknown
------------------------------------------------------------------------
found 164 values with 0 arguments and 164 locals
VID  ID    VALUE
------------------------------------------------------------------------
  0 [  0]: alloc i32
  1 [  1]: alloc i32
  2 [  2]: alloc i32
  3 [  3]: alloc i64
  4 [  4]: alloc i32
  5 [  5]: alloc [1024 x i8]
  6 [  6]: i8*
  7 [  7]: i32
  8 [  8]: i32
  9 [  9]: i1
 10 [ 10]: i32
 11 [ 11]: i1
 12 [ 12]: i32
 13 [ 13]: i32
 14 [ 14]: i1
 15 [ 15]: i32
 16 [ 16]: i32
 17 [ 17]: i1
 18 [ 18]: i32
 19 [ 19]: i32
 20 [ 20]: i32
 21 [ 21]: i1
 22 [ 22]: i1
 23 [ 23]: i1
 24 [ 24]: i32
 25 [ 25]: i1
 26 [ 26]: i32
 27 [ 27]: i32
 28 [ 28]: i32
 29 [ 29]: i32
 30 [ 30]: i32
 31 [ 31]: i32
 32 [ 32]: i1
 33 [ 33]: i32
 34 [ 34]: i32
 35 [ 35]: i32
 36 [ 36]: i32
 37 [ 37]: i1
 38 [ 38]: i32
 39 [ 39]: i32
 40 [ 40]: i1
 41 [ 41]: i32
 42 [ 42]: i32
 43 [ 43]: i1
 44 [ 44]: i32
 45 [ 45]: i1
 46 [ 46]: i1
 47 [ 47]: i8*
 48 [ 48]: i32
 49 [ 49]: i8*
 50 [ 50]: i32
 51 [ 51]: i32
 52 [ 52]: i64
 53 [ 53]: i64
 54 [ 54]: i1
 55 [ 55]: i1
 56 [ 56]: i1
 57 [ 57]: i8
 58 [ 58]: i1
 59 [ 59]: i8*
 60 [ 60]: i32
 61 [ 61]: i8*
 62 [ 62]: i32
 63 [ 63]: i32
 64 [ 64]: i64
 65 [ 65]: i64
 66 [ 66]: i1
 67 [ 67]: i1
 68 [ 68]: i1
 69 [ 69]: i8
 70 [ 70]: i1
 71 [ 71]: i8*
 72 [ 72]: i32
 73 [ 73]: i8*
 74 [ 74]: i32
 75 [ 75]: i32
 76 [ 76]: i64
 77 [ 77]: i64
 78 [ 78]: i1
 79 [ 79]: i1
 80 [ 80]: i1
 81 [ 81]: i8
 82 [ 82]: i1
 83 [ 83]: i1
 84 [ 84]: i1
 85 [ 85]: i64
 86 [ 86]: i64
 87 [ 87]: i64
 88 [ 88]: i64
 89 [ 89]: i32
 90 [ 90]: i8*
 91 [ 91]: i1
 92 [ 92]: i64
 93 [ 93]: i1
 94 [ 94]: i1
 95 [ 95]: i1
 96 [ 96]: i8
 97 [ 97]: i1
 98 [ 98]: i1
 99 [ 99]: i32
100 [100]: i32
101 [101]: i32
102 [102]: i32
103 [103]: i32
104 [104]: i32
105 [105]: i1
106 [106]: i32
107 [107]: i1
108 [108]: i32
109 [109]: i1
110 [110]: i8*
111 [111]: i64
112 [112]: i64
113 [113]: i1
114 [114]: i1
115 [115]: i1
116 [116]: i8
117 [117]: i1
118 [118]: i1
119 [119]: i1
120 [120]: i32
121 [121]: i1
122 [122]: i1
123 [123]: i32
124 [124]: i8*
125 [125]: i8*
126 [126]: i64
127 [127]: i64
128 [128]: i1
129 [129]: i1
130 [130]: i1
131 [131]: i8
132 [132]: i1
133 [133]: i8*
134 [134]: i8*
135 [135]: i32
136 [136]: i64
137 [137]: i64
138 [138]: i1
139 [139]: i1
140 [140]: i1
141 [141]: i8
142 [142]: i1
143 [143]: i1
144 [144]: i8*
145 [145]: i8*
146 [146]: i32
147 [147]: i64
148 [148]: i64
149 [149]: i1
150 [150]: i1
151 [151]: i1
152 [152]: i8
153 [153]: i1
154 [154]: i32
155 [155]: i1
156 [156]: i32
157 [157]: i32
158 [158]: i32
159 [159]: i32
160 [160]: i32
161 [161]: i32
162 [162]: i32
163 [163]: i32
------------------------------------------------------------------------
found a total of 105 constants
CID  ID    VALUE
------------------------------------------------------------------------
  0 [164]: 0(0x0)
  1 [165]: 54(0x36)
  2 [166]: 4294966588(0xfffffd3c)
  3 [167]: 0(0x0)
  4 [168]: 0(0x0)
  5 [169]: 0(0x0)
  6 [170]: 708(0x2c4)
  7 [171]: 6(0x6)
  8 [172]: 4294967295(0xffffffff)
  9 [173]: 0(0x0)
 10 [174]: 0(0x0)
 11 [175]: 53(0x35)
 12 [176]: 0(0x0)
 13 [177]: 0(0x0)
 14 [178]: 0(0x0)
 15 [179]: 6(0x6)
 16 [180]: 4294967295(0xffffffff)
 17 [181]: 6(0x6)
 18 [182]: 0(0x0)
 19 [183]: 700(0x2bc)
 20 [184]: 6(0x6)
 21 [185]: 4294967295(0xffffffff)
 22 [186]: 700(0x2bc)
 23 [187]: 5(0x5)
 24 [188]: 4294967295(0xffffffff)
 25 [189]: 0(0x0)
 26 [190]: 1025(0x401)
 27 [191]: 13573(0x3505)
 28 [192]: 3(0x3)
 29 [193]: 4294967295(0xffffffff)
 30 [194]: 4294967295(0xffffffff)
 31 [195]: 1(0x1)
 32 [196]: 1025(0x401)
 33 [197]: 1024(0x400)
 34 [198]: 14085(0x3705)
 35 [199]: 60(0x3c)
 36 [200]: 4294967293(0xfffffffd)
 37 [201]: 4294967293(0xfffffffd)
 38 [202]: 1(0x1)
 39 [203]: 1025(0x401)
 40 [204]: 1024(0x400)
 41 [205]: 14085(0x3705)
 42 [206]: 37(0x25)
 43 [207]: 4294967294(0xfffffffe)
 44 [208]: 4294967294(0xfffffffe)
 45 [209]: 1(0x1)
 46 [210]: 1025(0x401)
 47 [211]: 1024(0x400)
 48 [212]: 14085(0x3705)
 49 [213]: 51(0x33)
 50 [214]: 99(0x63)
 51 [215]: 0(0x0)
 52 [216]: 32(0x20)
 53 [217]: 32(0x20)
 54 [218]: 1(0x1)
 55 [219]: 1025(0x401)
 56 [220]: 1024(0x400)
 57 [221]: 0(0x0)
 58 [222]: 34(0x22)
 59 [223]: 1(0x1)
 60 [224]: 6(0x6)
 61 [225]: 0(0x0)
 62 [226]: 4294967290(0xfffffffa)
 63 [227]: 4294967290(0xfffffffa)
 64 [228]: 1025(0x401)
 65 [229]: 15625(0x3d09)
 66 [230]: 0(0x0)
 67 [231]: 1(0x1)
 68 [232]: 1025(0x401)
 69 [233]: 1024(0x400)
 70 [234]: 16651(0x410b)
 71 [235]: 47(0x2f)
 72 [236]: 47(0x2f)
 73 [237]: 32(0x20)
 74 [238]: 2(0x2)
 75 [239]: 37(0x25)
 76 [240]: 1(0x1)
 77 [241]: 1(0x1)
 78 [242]: 1(0x1)
 79 [243]: 1025(0x401)
 80 [244]: 1024(0x400)
 81 [245]: 17163(0x430b)
 82 [246]: 50(0x32)
 83 [247]: 2(0x2)
 84 [248]: 2(0x2)
 85 [249]: 1(0x1)
 86 [250]: 1025(0x401)
 87 [251]: 1024(0x400)
 88 [252]: 17163(0x430b)
 89 [253]: 48(0x30)
 90 [254]: 2(0x2)
 91 [255]: 2(0x2)
 92 [256]: 1(0x1)
 93 [257]: 1025(0x401)
 94 [258]: 1024(0x400)
 95 [259]: 17163(0x430b)
 96 [260]: 70(0x46)
 97 [261]: 1(0x1)
 98 [262]: 17(0x11)
 99 [263]: 1(0x1)
100 [264]: 33(0x21)
101 [265]: 0(0x0)
102 [266]: 5(0x5)
103 [267]: 0(0x0)
104 [268]: 0(0x0)
------------------------------------------------------------------------
found a total of 269 total values
------------------------------------------------------------------------
FUNCTION ID: F.0 -> NUMINSTS 230
BB   IDX  OPCODE              [ID /IID/MOD]  INST
------------------------------------------------------------------------
  0    0  OP_BC_GEPZ          [36 /184/  4]  6 = gepz p.5 + (164)
  0    1  OP_BC_LOAD          [39 /198/  3]  load  7 <- p.-2147483624
  0    2  OP_BC_CALL_API      [33 /168/  3]  8 = engine_functionality_level[65] ()
  0    3  OP_BC_ICMP_ULT      [25 /128/  3]  9 = (8 < 165)
  0    4  OP_BC_COPY          [34 /173/  3]  cp 7 -> 4
  0    5  OP_BC_BRANCH        [17 / 85/  0]  br 9 ? bb.1 : bb.2

  1    6  OP_BC_ADD           [1  /  8/  0]  10 = 7 + 166
  1    7  OP_BC_ICMP_SGT      [27 /138/  3]  11 = (10 > 167)
  1    8  OP_BC_SELECT        [31 /158/  3]  4 = 11 ? 10 : 168)
  1    9  OP_BC_COPY          [34 /173/  3]  cp 4 -> 4
  1   10  OP_BC_JMP           [18 / 90/  0]  jmp bb.2

  2   11  OP_BC_COPY          [34 /173/  3]  cp 4 -> 12
  2   12  OP_BC_CALL_API      [33 /168/  3]  13 = seek[3] (12, 169)
  2   13  OP_BC_ICMP_EQ       [21 /108/  3]  14 = (13 == 12)
  2   14  OP_BC_BRANCH        [17 / 85/  0]  br 14 ? bb.3 : bb.8

  3   15  OP_BC_ADD           [1  /  8/  0]  15 = 12 + 170
  3   16  OP_BC_CALL_API      [33 /168/  3]  16 = file_find_limit[64] (p.-2147483633, 171, 15)
  3   17  OP_BC_ICMP_EQ       [21 /108/  3]  17 = (16 == 172)
  3   18  OP_BC_BRANCH        [17 / 85/  0]  br 17 ? bb.4 : bb.5

  4   19  OP_BC_CALL_API      [33 /168/  3]  18 = debug_print_str[5] (p.-2147483628, 173)
  4   20  OP_BC_CALL_API      [33 /168/  3]  19 = debug_print_uint[6] (12)
  4   21  OP_BC_JMP           [18 / 90/  0]  jmp bb.8

  5   22  OP_BC_CALL_API      [33 /168/  3]  20 = seek[3] (16, 174)
  5   23  OP_BC_ICMP_NE       [22 /113/  3]  21 = (20 != 16)
  5   24  OP_BC_ICMP_EQ       [21 /108/  3]  22 = (16 == 12)
  5   25  OP_BC_OR            [12 / 60/  0]  23 = 21 | 22
  5   26  OP_BC_BRANCH        [17 / 85/  0]  br 23 ? bb.8 : bb.6

  6   27  OP_BC_CALL_API      [33 /168/  3]  24 = engine_functionality_level[65] ()
  6   28  OP_BC_ICMP_UGT      [23 /118/  3]  25 = (24 > 175)
  6   29  OP_BC_BRANCH        [17 / 85/  0]  br 25 ? bb.7 : bb.8

  7   30  OP_BC_CALL_API      [33 /168/  3]  26 = debug_print_str[5] (p.-2147483627, 176)
  7   31  OP_BC_CALL_API      [33 /168/  3]  27 = debug_print_uint[6] (16)
  7   32  OP_BC_CALL_API      [33 /168/  3]  28 = debug_print_str[5] (p.-2147483626, 177)
  7   33  OP_BC_CALL_API      [33 /168/  3]  29 = debug_print_uint[6] (12)
  7   34  OP_BC_CALL_API      [33 /168/  3]  30 = debug_print_str[5] (p.-2147483625, 178)
  7   35  OP_BC_JMP           [18 / 90/  0]  jmp bb.8

  8   36  OP_BC_CALL_API      [33 /168/  3]  31 = file_find[15] (p.-2147483633, 179)
  8   37  OP_BC_ICMP_EQ       [21 /108/  3]  32 = (31 == 180)
  8   38  OP_BC_BRANCH        [17 / 85/  0]  br 32 ? bb.46 : bb.9

  9   39  OP_BC_ADD           [1  /  8/  0]  33 = 31 + 181
  9   40  OP_BC_CALL_API      [33 /168/  3]  34 = seek[3] (33, 182)
  9   41  OP_BC_ADD           [1  /  8/  0]  35 = 31 + 183
  9   42  OP_BC_CALL_API      [33 /168/  3]  36 = file_find_limit[64] (p.-2147483632, 184, 35)
  9   43  OP_BC_ICMP_EQ       [21 /108/  3]  37 = (36 == 185)
  9   44  OP_BC_BRANCH        [17 / 85/  0]  br 37 ? bb.8 : bb.10

 10   45  OP_BC_ADD           [1  /  8/  0]  38 = 36 + 186
 10   46  OP_BC_CALL_API      [33 /168/  3]  39 = file_find_limit[64] (p.-2147483631, 187, 38)
 10   47  OP_BC_ICMP_EQ       [21 /108/  3]  40 = (39 == 188)
 10   48  OP_BC_BRANCH        [17 / 85/  0]  br 40 ? bb.8 : bb.11

 11   49  OP_BC_CALL_API      [33 /168/  3]  41 = seek[3] (31, 189)
 11   50  OP_BC_SUB           [2  / 13/  1]  42 = 36 - 31
 11   51  OP_BC_ICMP_ULT      [25 /128/  3]  43 = (42 < 190)
 11   52  OP_BC_COPY          [34 /173/  3]  cp 191 -> 0
 11   53  OP_BC_BRANCH        [17 / 85/  0]  br 43 ? bb.12 : bb.47

 12   54  OP_BC_CALL_API      [33 /168/  3]  44 = read[1] (p.6, 42)
 12   55  OP_BC_ICMP_EQ       [21 /108/  3]  45 = (44 == 42)
 12   56  OP_BC_BRANCH        [17 / 85/  0]  br 45 ? bb.13 : bb.46

 13   57  OP_BC_ICMP_SGT      [27 /138/  3]  46 = (42 > 192)
 13   58  OP_BC_BRANCH        [17 / 85/  0]  br 46 ? bb.14 : bb.45

 14   59  OP_BC_GEP1          [35 /179/  4]  47 = gep1 p.6 + (193 * 65)
 14   60  OP_BC_SUB           [2  / 13/  1]  48 = 36 - 31
 14   61  OP_BC_GEP1          [35 /179/  4]  49 = gep1 p.47 + (48 * 65)
 14   62  OP_BC_ADD           [1  /  8/  0]  50 = 36 + 194
 14   63  OP_BC_SUB           [2  / 13/  1]  51 = 50 - 31
 14   64  OP_BC_SEXT          [15 / 79/  4]  52 = 51 sext 20
 14   65  OP_BC_ADD           [1  /  9/  0]  53 = 52 + 195
 14   66  OP_BC_ICMP_ULT      [25 /129/  4]  54 = (53 < 196)
 14   67  OP_BC_ICMP_ULT      [25 /128/  3]  55 = (51 < 197)
 14   68  OP_BC_AND           [11 / 55/  0]  56 = 54 & 55
 14   69  OP_BC_COPY          [34 /173/  3]  cp 198 -> 0
 14   70  OP_BC_BRANCH        [17 / 85/  0]  br 56 ? bb.15 : bb.47

 15   71  OP_BC_LOAD          [39 /196/  1]  load  57 <- p.49
 15   72  OP_BC_ICMP_EQ       [21 /106/  1]  58 = (57 == 199)
 15   73  OP_BC_BRANCH        [17 / 85/  0]  br 58 ? bb.20 : bb.16

 16   74  OP_BC_GEP1          [35 /179/  4]  59 = gep1 p.6 + (200 * 65)
 16   75  OP_BC_SUB           [2  / 13/  1]  60 = 36 - 31
 16   76  OP_BC_GEP1          [35 /179/  4]  61 = gep1 p.59 + (60 * 65)
 16   77  OP_BC_ADD           [1  /  8/  0]  62 = 36 + 201
 16   78  OP_BC_SUB           [2  / 13/  1]  63 = 62 - 31
 16   79  OP_BC_SEXT          [15 / 79/  4]  64 = 63 sext 20
 16   80  OP_BC_ADD           [1  /  9/  0]  65 = 64 + 202
 16   81  OP_BC_ICMP_ULT      [25 /129/  4]  66 = (65 < 203)
 16   82  OP_BC_ICMP_ULT      [25 /128/  3]  67 = (63 < 204)
 16   83  OP_BC_AND           [11 / 55/  0]  68 = 66 & 67
 16   84  OP_BC_COPY          [34 /173/  3]  cp 205 -> 0
 16   85  OP_BC_BRANCH        [17 / 85/  0]  br 68 ? bb.17 : bb.47

 17   86  OP_BC_LOAD          [39 /196/  1]  load  69 <- p.61
 17   87  OP_BC_ICMP_EQ       [21 /106/  1]  70 = (69 == 206)
 17   88  OP_BC_BRANCH        [17 / 85/  0]  br 70 ? bb.18 : bb.45

 18   89  OP_BC_GEP1          [35 /179/  4]  71 = gep1 p.6 + (207 * 65)
 18   90  OP_BC_SUB           [2  / 13/  1]  72 = 36 - 31
 18   91  OP_BC_GEP1          [35 /179/  4]  73 = gep1 p.71 + (72 * 65)
 18   92  OP_BC_ADD           [1  /  8/  0]  74 = 36 + 208
 18   93  OP_BC_SUB           [2  / 13/  1]  75 = 74 - 31
 18   94  OP_BC_SEXT          [15 / 79/  4]  76 = 75 sext 20
 18   95  OP_BC_ADD           [1  /  9/  0]  77 = 76 + 209
 18   96  OP_BC_ICMP_ULT      [25 /129/  4]  78 = (77 < 210)
 18   97  OP_BC_ICMP_ULT      [25 /128/  3]  79 = (75 < 211)
 18   98  OP_BC_AND           [11 / 55/  0]  80 = 78 & 79
 18   99  OP_BC_COPY          [34 /173/  3]  cp 212 -> 0
 18  100  OP_BC_BRANCH        [17 / 85/  0]  br 80 ? bb.19 : bb.47

 19  101  OP_BC_LOAD          [39 /196/  1]  load  81 <- p.73
 19  102  OP_BC_ICMP_EQ       [21 /106/  1]  82 = (81 == 213)
 19  103  OP_BC_ICMP_EQ       [21 /106/  1]  83 = (57 == 214)
 19  104  OP_BC_AND           [11 / 55/  0]  84 = 82 & 83
 19  105  OP_BC_BRANCH        [17 / 85/  0]  br 84 ? bb.20 : bb.45

 20  106  OP_BC_ZEXT          [16 / 84/  4]  85 = 42 zext ffffffff
 20  107  OP_BC_COPY          [34 /174/  4]  cp 215 -> 3
 20  108  OP_BC_JMP           [18 / 90/  0]  jmp bb.21

 21  109  OP_BC_COPY          [34 /174/  4]  cp 3 -> 86
 21  110  OP_BC_SHL           [8  / 44/  4]  87 = 86 << 216
 21  111  OP_BC_ASHR          [10 / 54/  4]  88 = 87 >> 217
 21  112  OP_BC_TRUNC         [14 / 73/  3]  89 = 86 trunc ffffffffffffffff
 21  113  OP_BC_GEP1          [35 /179/  4]  90 = gep1 p.6 + (89 * 65)
 21  114  OP_BC_ICMP_SLT      [30 /154/  4]  91 = (86 < 85)
 21  115  OP_BC_BRANCH        [17 / 85/  0]  br 91 ? bb.22 : bb.26

 22  116  OP_BC_ADD           [1  /  9/  0]  92 = 88 + 218
 22  117  OP_BC_ICMP_ULT      [25 /129/  4]  93 = (92 < 219)
 22  118  OP_BC_ICMP_ULT      [25 /129/  4]  94 = (88 < 220)
 22  119  OP_BC_AND           [11 / 55/  0]  95 = 93 & 94
 22  120  OP_BC_COPY          [34 /173/  3]  cp 221 -> 0
 22  121  OP_BC_BRANCH        [17 / 85/  0]  br 95 ? bb.23 : bb.47

 23  122  OP_BC_LOAD          [39 /196/  1]  load  96 <- p.90
 23  123  OP_BC_ICMP_EQ       [21 /106/  1]  97 = (96 == 222)
 23  124  OP_BC_BRANCH        [17 / 85/  0]  br 97 ? bb.25 : bb.24

 24  125  OP_BC_ADD           [1  /  9/  0]  3 = 86 + 223
 24  126  OP_BC_COPY          [34 /174/  4]  cp 3 -> 3
 24  127  OP_BC_JMP           [18 / 90/  0]  jmp bb.21

 25  128  OP_BC_ICMP_EQ       [21 /109/  4]  98 = (90 == -2147483648)
 25  129  OP_BC_BRANCH        [17 / 85/  0]  br 98 ? bb.26 : bb.45

 26  130  OP_BC_ADD           [1  /  8/  0]  99 = 36 + 224
 26  131  OP_BC_CALL_API      [33 /168/  3]  100 = seek[3] (99, 225)
 26  132  OP_BC_SUB           [2  / 13/  1]  101 = 39 - 36
 26  133  OP_BC_ADD           [1  /  8/  0]  102 = 101 + 226
 26  134  OP_BC_ADD           [1  /  8/  0]  103 = 39 + 227
 26  135  OP_BC_SUB           [2  / 13/  1]  104 = 103 - 36
 26  136  OP_BC_ICMP_ULT      [25 /128/  3]  105 = (104 < 228)
 26  137  OP_BC_COPY          [34 /173/  3]  cp 229 -> 0
 26  138  OP_BC_BRANCH        [17 / 85/  0]  br 105 ? bb.27 : bb.47

 27  139  OP_BC_CALL_API      [33 /168/  3]  106 = read[1] (p.6, 102)
 27  140  OP_BC_ICMP_EQ       [21 /108/  3]  107 = (106 == 102)
 27  141  OP_BC_COPY          [34 /173/  3]  cp 230 -> 2
 27  142  OP_BC_BRANCH        [17 / 85/  0]  br 107 ? bb.28 : bb.46

 28  143  OP_BC_COPY          [34 /173/  3]  cp 2 -> 108
 28  144  OP_BC_ICMP_SLT      [30 /153/  3]  109 = (108 < 102)
 28  145  OP_BC_BRANCH        [17 / 85/  0]  br 109 ? bb.29 : bb.43

 29  146  OP_BC_GEP1          [35 /179/  4]  110 = gep1 p.6 + (108 * 65)
 29  147  OP_BC_SEXT          [15 / 79/  4]  111 = 108 sext 20
 29  148  OP_BC_ADD           [1  /  9/  0]  112 = 111 + 231
 29  149  OP_BC_ICMP_ULT      [25 /129/  4]  113 = (112 < 232)
 29  150  OP_BC_ICMP_ULT      [25 /128/  3]  114 = (108 < 233)
 29  151  OP_BC_AND           [11 / 55/  0]  115 = 113 & 114
 29  152  OP_BC_COPY          [34 /173/  3]  cp 234 -> 0
 29  153  OP_BC_BRANCH        [17 / 85/  0]  br 115 ? bb.30 : bb.47

 30  154  OP_BC_LOAD          [39 /196/  1]  load  116 <- p.110
 30  155  OP_BC_ICMP_SLT      [30 /151/  1]  117 = (116 < 235)
 30  156  OP_BC_BRANCH        [17 / 85/  0]  br 117 ? bb.32 : bb.31

 31  157  OP_BC_ICMP_EQ       [21 /106/  1]  118 = (116 == 236)
 31  158  OP_BC_COPY          [34 /173/  3]  cp 108 -> 1
 31  159  OP_BC_BRANCH        [17 / 85/  0]  br 118 ? bb.42 : bb.33

 32  160  OP_BC_ICMP_EQ       [21 /106/  1]  119 = (116 == 237)
 32  161  OP_BC_COPY          [34 /173/  3]  cp 108 -> 1
 32  162  OP_BC_BRANCH        [17 / 85/  0]  br 119 ? bb.42 : bb.33

 33  163  OP_BC_ADD           [1  /  8/  0]  120 = 108 + 238
 33  164  OP_BC_ICMP_SLT      [30 /153/  3]  121 = (120 < 102)
 33  165  OP_BC_BRANCH        [17 / 85/  0]  br 121 ? bb.34 : bb.43

 34  166  OP_BC_ICMP_EQ       [21 /106/  1]  122 = (116 == 239)
 34  167  OP_BC_BRANCH        [17 / 85/  0]  br 122 ? bb.35 : bb.43

 35  168  OP_BC_ADD           [1  /  8/  0]  123 = 108 + 240
 35  169  OP_BC_GEP1          [35 /179/  4]  124 = gep1 p.6 + (241 * 65)
 35  170  OP_BC_GEP1          [35 /179/  4]  125 = gep1 p.124 + (108 * 65)
 35  171  OP_BC_SEXT          [15 / 79/  4]  126 = 123 sext 20
 35  172  OP_BC_ADD           [1  /  9/  0]  127 = 126 + 242
 35  173  OP_BC_ICMP_ULT      [25 /129/  4]  128 = (127 < 243)
 35  174  OP_BC_ICMP_ULT      [25 /128/  3]  129 = (123 < 244)
 35  175  OP_BC_AND           [11 / 55/  0]  130 = 128 & 129
 35  176  OP_BC_COPY          [34 /173/  3]  cp 245 -> 0
 35  177  OP_BC_BRANCH        [17 / 85/  0]  br 130 ? bb.36 : bb.47

 36  178  OP_BC_LOAD          [39 /196/  1]  load  131 <- p.125
 36  179  OP_BC_ICMP_EQ       [21 /106/  1]  132 = (131 == 246)
 36  180  OP_BC_BRANCH        [17 / 85/  0]  br 132 ? bb.37 : bb.39

 37  181  OP_BC_GEP1          [35 /179/  4]  133 = gep1 p.6 + (247 * 65)
 37  182  OP_BC_GEP1          [35 /179/  4]  134 = gep1 p.133 + (108 * 65)
 37  183  OP_BC_ADD           [1  /  8/  0]  135 = 108 + 248
 37  184  OP_BC_SEXT          [15 / 79/  4]  136 = 135 sext 20
 37  185  OP_BC_ADD           [1  /  9/  0]  137 = 136 + 249
 37  186  OP_BC_ICMP_ULT      [25 /129/  4]  138 = (137 < 250)
 37  187  OP_BC_ICMP_ULT      [25 /128/  3]  139 = (135 < 251)
 37  188  OP_BC_AND           [11 / 55/  0]  140 = 138 & 139
 37  189  OP_BC_COPY          [34 /173/  3]  cp 252 -> 0
 37  190  OP_BC_BRANCH        [17 / 85/  0]  br 140 ? bb.38 : bb.47

 38  191  OP_BC_LOAD          [39 /196/  1]  load  141 <- p.134
 38  192  OP_BC_ICMP_EQ       [21 /106/  1]  142 = (141 == 253)
 38  193  OP_BC_COPY          [34 /173/  3]  cp 120 -> 1
 38  194  OP_BC_BRANCH        [17 / 85/  0]  br 142 ? bb.42 : bb.39

 39  195  OP_BC_AND           [11 / 55/  0]  143 = 122 & 132
 39  196  OP_BC_BRANCH        [17 / 85/  0]  br 143 ? bb.40 : bb.43

 40  197  OP_BC_GEP1          [35 /179/  4]  144 = gep1 p.6 + (254 * 65)
 40  198  OP_BC_GEP1          [35 /179/  4]  145 = gep1 p.144 + (108 * 65)
 40  199  OP_BC_ADD           [1  /  8/  0]  146 = 108 + 255
 40  200  OP_BC_SEXT          [15 / 79/  4]  147 = 146 sext 20
 40  201  OP_BC_ADD           [1  /  9/  0]  148 = 147 + 256
 40  202  OP_BC_ICMP_ULT      [25 /129/  4]  149 = (148 < 257)
 40  203  OP_BC_ICMP_ULT      [25 /128/  3]  150 = (146 < 258)
 40  204  OP_BC_AND           [11 / 55/  0]  151 = 149 & 150
 40  205  OP_BC_COPY          [34 /173/  3]  cp 259 -> 0
 40  206  OP_BC_BRANCH        [17 / 85/  0]  br 151 ? bb.41 : bb.47

 41  207  OP_BC_LOAD          [39 /196/  1]  load  152 <- p.145
 41  208  OP_BC_ICMP_EQ       [21 /106/  1]  153 = (152 == 260)
 41  209  OP_BC_COPY          [34 /173/  3]  cp 120 -> 1
 41  210  OP_BC_BRANCH        [17 / 85/  0]  br 153 ? bb.42 : bb.43

 42  211  OP_BC_COPY          [34 /173/  3]  cp 1 -> 154
 42  212  OP_BC_ADD           [1  /  8/  0]  2 = 154 + 261
 42  213  OP_BC_COPY          [34 /173/  3]  cp 2 -> 2
 42  214  OP_BC_JMP           [18 / 90/  0]  jmp bb.28

 43  215  OP_BC_ICMP_EQ       [21 /108/  3]  155 = (108 == 102)
 43  216  OP_BC_BRANCH        [17 / 85/  0]  br 155 ? bb.44 : bb.46

 44  217  OP_BC_CALL_API      [33 /168/  3]  156 = debug_print_str_start[53] (p.-2147483630, 262)
 44  218  OP_BC_CALL_API      [33 /168/  3]  157 = debug_print_uint[6] (31)
 44  219  OP_BC_CALL_API      [33 /168/  3]  158 = debug_print_str_nonl[54] (p.-2147483629, 263)
 44  220  OP_BC_CALL_API      [33 /168/  3]  159 = setvirusname[4] (p.-2147483622, 264)
 44  221  OP_BC_RET           [19 / 98/  3]  ret 265

 45  222  OP_BC_ADD           [1  /  8/  0]  160 = 39 + 266
 45  223  OP_BC_CALL_API      [33 /168/  3]  161 = seek[3] (160, 267)
 45  224  OP_BC_JMP           [18 / 90/  0]  jmp bb.8

 46  225  OP_BC_RET           [19 / 98/  3]  ret 268

 47  226  OP_BC_COPY          [34 /173/  3]  cp 0 -> 162
 47  227  OP_BC_CALL_API      [33 /168/  3]  163 = bytecode_rt_error[41] (162)
 47  228  OP_BC_ABORT         [45 /225/  0]  ABORT!!
 47  229  OP_BC_ABORT         [45 /225/  0]  ABORT!!
------------------------------------------------------------------------
+ CHECK_RESULT 0 0 0 'Check clambc -c failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -c failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -T 7 3986187.cbc
+ CHECK_RESULT 0 0 0 'Check clambc -T failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -T failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -s 3986187.cbc
+ CHECK_RESULT 0 0 0 'Check clambc -s failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc -s failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc 3986187.cbc --statistics=bytecode
+ CHECK_RESULT 0 0 0 'Check clambc --statistics failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc --statistics failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc 3986187.cbc
+ CHECK_RESULT 0 0 0 'Check clambc failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -f 3986187.cbc --debug
LibClamAV debug: searching for unrar, user-searchpath: /usr/lib64
LibClamAV debug: searching for unrar: libclamunrar_iface.so.9.0.5 not found
LibClamAV debug: searching for unrar: libclamunrar_iface.so.9 not found
LibClamAV debug: searching for unrar: libclamunrar_iface.so not found
LibClamAV debug: searching for unrar: libclamunrar_iface.a not found
LibClamAV debug: Cannot dlopen libclamunrar_iface: file not found - unrar support unavailable
LibClamAV debug: Loading trusted bytecode
LibClamAV debug: bytecode: Parsed 11 APIcalls, maxapi 66
LibClamAV debug: Parsed 48 BBs, 230 instructions
LibClamAV debug: Parsed 1 functions
LibClamAV debug: Initialized 0.103.6 engine
LibClamAV debug: Initializing engine->root[0]
LibClamAV debug: Initializing AC pattern matcher of root[0]
LibClamAV debug: cli_initroots: Initializing BM tables of root[0]
LibClamAV debug: Initializing engine->root[1]
LibClamAV debug: Initializing AC pattern matcher of root[1]
LibClamAV debug: cli_initroots: Initializing BM tables of root[1]
LibClamAV debug: Initializing engine->root[2]
LibClamAV debug: Initializing AC pattern matcher of root[2]
LibClamAV debug: Initializing engine->root[3]
LibClamAV debug: Initializing AC pattern matcher of root[3]
LibClamAV debug: Initializing engine->root[4]
LibClamAV debug: Initializing AC pattern matcher of root[4]
LibClamAV debug: Initializing engine->root[5]
LibClamAV debug: Initializing AC pattern matcher of root[5]
LibClamAV debug: Initializing engine->root[6]
LibClamAV debug: Initializing AC pattern matcher of root[6]
LibClamAV debug: Initializing engine->root[7]
LibClamAV debug: Initializing AC pattern matcher of root[7]
LibClamAV debug: Initializing engine->root[8]
LibClamAV debug: Initializing AC pattern matcher of root[8]
LibClamAV debug: Initializing engine->root[9]
LibClamAV debug: Initializing AC pattern matcher of root[9]
LibClamAV debug: Initializing engine->root[10]
LibClamAV debug: Initializing AC pattern matcher of root[10]
LibClamAV debug: Initializing engine->root[11]
LibClamAV debug: Initializing AC pattern matcher of root[11]
LibClamAV debug: Initializing engine->root[12]
LibClamAV debug: Initializing AC pattern matcher of root[12]
LibClamAV debug: Initializing engine->root[13]
LibClamAV debug: Initializing AC pattern matcher of root[13]
LibClamAV debug: Initializing engine->root[14]
LibClamAV debug: Initializing AC pattern matcher of root[14]
LibClamAV debug: Loaded 156 filetype definitions
LibClamAV debug: Using filter for trie 0
LibClamAV debug: Matcher[0]: GENERIC: AC sigs: 84 (reloff: 1, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 32 
LibClamAV debug: Using filter for trie 1
LibClamAV debug: Matcher[1]: PE: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 
LibClamAV debug: Matcher[2]: OLE2: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[3]: HTML: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Using filter for trie 4
LibClamAV debug: Matcher[4]: MAIL: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[5]: GRAPHICS: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[6]: ELF: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Using filter for trie 7
LibClamAV debug: Matcher[7]: ASCII: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[8]: NOT USED: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[9]: MACH-O: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[10]: PDF: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[11]: FLASH: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[12]: JAVA: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[13]: INTERNAL: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Matcher[14]: OTHER: AC sigs: 0 (reloff: 0, absoff: 0) BM sigs: 0 (reloff: 0, absoff: 0) PCREs: 0 (reloff: 0, absoff: 0) maxpatlen 0 (ac_only mode)
LibClamAV debug: Dynamic engine configuration settings:
LibClamAV debug: --------------------------------------
LibClamAV debug: Module PE: On
LibClamAV debug:    * Submodule     PARITE:	On
LibClamAV debug:    * Submodule       KRIZ:	On
LibClamAV debug:    * Submodule    MAGISTR:	On
LibClamAV debug:    * Submodule    POLIPOS:	On
LibClamAV debug:    * Submodule    MD5SECT:	On
LibClamAV debug:    * Submodule        UPX:	On
LibClamAV debug:    * Submodule        FSG:	On
LibClamAV debug:    * Submodule    SWIZZOR:	** Off **
LibClamAV debug:    * Submodule     PETITE:	On
LibClamAV debug:    * Submodule     PESPIN:	On
LibClamAV debug:    * Submodule         YC:	On
LibClamAV debug:    * Submodule     WWPACK:	On
LibClamAV debug:    * Submodule     NSPACK:	On
LibClamAV debug:    * Submodule        MEW:	On
LibClamAV debug:    * Submodule      UPACK:	On
LibClamAV debug:    * Submodule     ASPACK:	On
LibClamAV debug:    * Submodule    CATALOG:	On
LibClamAV debug:    * Submodule      CERTS:	On
LibClamAV debug:    * Submodule  MATCHICON:	On
LibClamAV debug:    * Submodule     IMPTBL:	On
LibClamAV debug: Module ELF: On
LibClamAV debug: Module MACHO: On
LibClamAV debug: Module ARCHIVE: On
LibClamAV debug:    * Submodule        RAR:	On
LibClamAV debug:    * Submodule        ZIP:	On
LibClamAV debug:    * Submodule       GZIP:	On
LibClamAV debug:    * Submodule       BZIP:	On
LibClamAV debug:    * Submodule        ARJ:	On
LibClamAV debug:    * Submodule       SZDD:	On
LibClamAV debug:    * Submodule        CAB:	On
LibClamAV debug:    * Submodule        CHM:	On
LibClamAV debug:    * Submodule       OLE2:	On
LibClamAV debug:    * Submodule        TAR:	On
LibClamAV debug:    * Submodule       CPIO:	On
LibClamAV debug:    * Submodule     BINHEX:	On
LibClamAV debug:    * Submodule        SIS:	On
LibClamAV debug:    * Submodule       NSIS:	On
LibClamAV debug:    * Submodule     AUTOIT:	On
LibClamAV debug:    * Submodule    ISHIELD:	On
LibClamAV debug:    * Submodule       7zip:	On
LibClamAV debug:    * Submodule    ISO9660:	On
LibClamAV debug:    * Submodule        DMG:	On
LibClamAV debug:    * Submodule        XAR:	On
LibClamAV debug:    * Submodule    HFSPLUS:	On
LibClamAV debug:    * Submodule         XZ:	On
LibClamAV debug:    * Submodule     PASSWD:	On
LibClamAV debug:    * Submodule        MBR:	On
LibClamAV debug:    * Submodule        GPT:	On
LibClamAV debug:    * Submodule        APM:	On
LibClamAV debug:    * Submodule        EGG:	On
LibClamAV debug: Module DOCUMENT: On
LibClamAV debug:    * Submodule       HTML:	On
LibClamAV debug:    * Submodule        RTF:	On
LibClamAV debug:    * Submodule        PDF:	On
LibClamAV debug:    * Submodule     SCRIPT:	On
LibClamAV debug:    * Submodule HTMLSKIPRAW:	On
LibClamAV debug:    * Submodule     JSNORM:	On
LibClamAV debug:    * Submodule        SWF:	On
LibClamAV debug:    * Submodule      OOXML:	On
LibClamAV debug:    * Submodule      MSPML:	On
LibClamAV debug:    * Submodule        HWP:	On
LibClamAV debug: Module MAIL: On
LibClamAV debug:    * Submodule       MBOX:	On
LibClamAV debug:    * Submodule       TNEF:	On
LibClamAV debug: Module OTHER: On
LibClamAV debug:    * Submodule  UUENCODED:	On
LibClamAV debug:    * Submodule     SCRENC:	On
LibClamAV debug:    * Submodule       RIFF:	On
LibClamAV debug:    * Submodule       JPEG:	On
LibClamAV debug:    * Submodule    CRYPTFF:	On
LibClamAV debug:    * Submodule        DLP:	On
LibClamAV debug:    * Submodule  MYDOOMLOG:	On
LibClamAV debug:    * Submodule PREFILTERING:	On
LibClamAV debug:    * Submodule PDFNAMEOBJ:	On
LibClamAV debug:    * Submodule  PRTNINTXN:	On
LibClamAV debug:    * Submodule        LZW:	On
LibClamAV debug:    * Submodule        GIF:	On
LibClamAV debug:    * Submodule        PNG:	On
LibClamAV debug:    * Submodule       TIFF:	On
LibClamAV debug: Module PHISHING On
LibClamAV debug:    * Submodule     ENGINE:	On
LibClamAV debug:    * Submodule    ENTCONV:	On
LibClamAV debug: Module BYTECODE On
LibClamAV debug:    * Submodule INTERPRETER:	On
LibClamAV debug:    * Submodule    JIT X86:	On
LibClamAV debug:    * Submodule    JIT PPC:	On
LibClamAV debug:    * Submodule    JIT ARM:	** Off **
LibClamAV debug: Module STATS Off
LibClamAV debug: Module PCRE On
LibClamAV debug:    * Submodule    SUPPORT:	On
LibClamAV debug:    * Submodule    OPTIONS:	On
LibClamAV debug:    * Submodule     GLOBAL:	On
LibClamAV debug: pool memory used: 1.835 MB
LibClamAV debug: No bytecodes loaded, not running builtin test
LibClamAV debug: environment detected:
LibClamAV debug: check_platform(0x0a017f7f, 0x08000000, 0x000a0301)
LibClamAV debug: check_platform(0x0a  0  1  7f  7f,0x0  8       00 00 00,0x00    0a 03 01)
LibClamAV debug: check_platform( OS CPU COM FL DCONF,BE PTR CXX VV.VV.VV, FLG CC VV.VV.VV)
LibClamAV debug: Engine version: 0.103.6
LibClamAV debug: Host triple: 
LibClamAV debug: Host CPU: 
LibClamAV debug: OS: Linux
LibClamAV debug: OS release: 5.10.0-9.oe2203.riscv64
LibClamAV debug: OS version: #1 SMP Thu Dec 8 04:05:09 UTC 2022
LibClamAV debug: OS hardware: riscv64
LibClamAV debug: OS LLVM category: 0
LibClamAV debug: Has JIT compiled: 0
LibClamAV debug: ------------------------------------------------------
LibClamAV debug: Bytecode: JIT not supported on this architecture, falling back
LibClamAV debug: Bytecode: mode changed to 2
LibClamAV debug: Bytecode: mode is 2
LibClamAV debug: Loading trusted bytecode
LibClamAV debug: bytecode: Parsed 9 APIcalls, maxapi 74
LibClamAV debug: unknown inst type: 96
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: unknown inst type: 67
LibClamAV debug: Parsed 53 BBs, 226 instructions
LibClamAV debug: Parsed 1 functions
LibClamAV debug: Bytecode: BC_STARTUP running (builtin)
LibClamAV debug: Bytecode 0: executing in interpreter mode
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387c88 (+256) id 6
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387b84 (+2) id 2
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387b88 (+256) id 1
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387d88 (+4) id 5
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387d90 (+648) id 4
LibClamAV debug: bytecode: registered ctx variable at 0x2ad71bd730 (+744) id 7
LibClamAV debug: bytecode debug: startup: bytecode execution in auto mode
LibClamAV debug: interpreter bytecode run finished in 1906us, after executing 96 opcodes
LibClamAV debug: Bytecode: disable status is 0
LibClamAV debug: Bytecode: 0 bytecode prepared with JIT, 1 prepared with interpreter, 1 total
LibClamAV debug: Bytecode 0: executing in interpreter mode
LibClamAV debug: bytecode: registered ctx variable at 0x2ad71b1008 (+256) id 6
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387b84 (+2) id 2
LibClamAV debug: bytecode: registered ctx variable at 0x2ad71b1008 (+256) id 1
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387d88 (+4) id 5
LibClamAV debug: bytecode: registered ctx variable at 0x3fca387d90 (+648) id 4
LibClamAV debug: bytecode: registered ctx variable at 0x2ad71be260 (+840) id 7
LibClamAV debug: bcapi_seek: no fmap
LibClamAV debug: bcapi_file_find preconditions not met
LibClamAV debug: interpreter bytecode run finished in 491us, after executing 15 opcodes
LibClamAV debug: Cleaning up phishcheck
LibClamAV debug: Phishcheck cleaned up
[clambc] Bytecode loaded
[clambc] Bytecode prepared
[clambc] Running bytecode function :0
[clambc] Bytecode run finished
[clambc] Bytecode returned: 0x0
[clambc] Exiting
+ CHECK_RESULT 0 0 0 'Check clambc --debug failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc --debug failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc --version
+ grep 'Clam AntiVirus Bytecode Testing Tool'
Clam AntiVirus Bytecode Testing Tool 0.103.6
+ CHECK_RESULT 0 0 0 'Check clambc version failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc version failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ clambc -h

                       Clam AntiVirus: Bytecode Testing Tool 0.103.6
           By The ClamAV Team: https://www.clamav.net/about.html#credits
           (C) 2022 Cisco Systems, Inc.

    clambc <file> [function] [param1 ...]

    --help                 -h         Show this help
    --version              -V         Show version
    --debug                           Show debug
    --force-interpreter    -f         Force using the interpreter instead of the JIT
    --trust-bytecode       -t         Trust loaded bytecode (default yes)
    --info                 -i         Print information about bytecode
    --printsrc             -p         Print bytecode source
    --printbcir            -c         Print IR of bytecode signature
    --input                -c         Input file to run the bytecode on
    --trace <level>        -T         Set bytecode trace level 0..7 (default 7)
    --no-trace-showsource  -s         Don't show source line during tracing
    --statistics=bytecode             Collect and print bytecode execution statistics
    file                              File to test

**Caution**: You should NEVER run bytecode signatures from untrusted sources.
Doing so may result in arbitrary code execution.

+ CHECK_RESULT 0 0 0 'Check clambc help message failed.'
+ actual_result=0
+ expect_result=0
+ mode=0
+ error_log='Check clambc help message failed.'
+ '[' -z 0 ']'
+ '[' 0 -eq 0 ']'
+ test 0x '!=' 0x
+ return 0
+ LOG_INFO 'End to run test.'
+ message='End to run test.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'End to run test.'
Thu Jan  5 23:00:44 2023 - INFO  - End to run test.
+ CASE_RESULT 0
+ case_re=0
+ test -z ''
+ test 0 -eq 0
+ LOG_INFO 'succeed to execute the case.'
+ message='succeed to execute the case.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'succeed to execute the case.'
Thu Jan  5 23:00:45 2023 - INFO  - succeed to execute the case.
+ exec_result=
+ exit 0
+ post_test
+ LOG_INFO 'Start to restore the test environment.'
+ message='Start to restore the test environment.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'Start to restore the test environment.'
Thu Jan  5 23:00:46 2023 - INFO  - Start to restore the test environment.
+ cd -
/root/GitRepo/mugen-riscv/testcases/cli-test/clamav
+ rm -rf /opt/test_clambc
+ DNF_REMOVE
+ node=1
+ pkg_list=
+ mode=0
+ [[ -z /tmp/tmp61tj2oj5 ]]
+ '[' 0 -ne 0 ']'
+ '[' 1 == 0 ']'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/rpm_manage.py remove --node 1 --pkgs '' --tempfile /tmp/tmp61tj2oj5
+ '[' 0 -ne 0 ']'
+ LOG_INFO 'End to restore the test environment.'
+ message='End to restore the test environment.'
+ python3 /root/GitRepo/mugen-riscv/libs/locallibs/mugen_log.py --level info --message 'End to restore the test environment.'
Thu Jan  5 23:01:23 2023 - INFO  - End to restore the test environment.
